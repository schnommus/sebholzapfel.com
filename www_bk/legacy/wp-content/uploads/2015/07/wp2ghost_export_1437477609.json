{"data":{"posts":[{"id":60,"title":"D.I.Y Virtual Reality - A gaming interface?","slug":"d-i-y-virtual-reality-a-gaming-interface","markdown":"\n**This is an old post on the topic and I have completely re-covered it [here](http:\/\/www.sebholzapfel.com\/?p=82 \"Atomic IMU and some C++: A Generic VR system.\")**\n\n### A little Backstory\n\nA couple of months ago I began building a VR-type system (headtracking, HUD etc), with the (rather ambitious) requirement that it would be able to interface into* any game that I throw at it. *I succeeded (mostly), but before I get into that, I\u2019m going to give some story of how it came to be:\n\n### V.R \u2013 For Noobs?\n\nI first came up with the idea when I (by chance) came across these MyVu devices on eBay:\n\n*![](http:\/\/www.coolest-gadgets.com\/wp-content\/uploads\/myvu-crystal-ev.jpg \"VR glasses\")*\n\n***Wikipedia:**  \n*\n\n> **Myvu Personal Media Viewer** refers to a product family of [wearable](http:\/\/en.wikipedia.org\/wiki\/Head-mounted_display \"Head-mounted display\") [video display](http:\/\/en.wikipedia.org\/wiki\/Video_display \"Video display\") glasses released by Myvu Corporation.<sup>[[1]](http:\/\/en.wikipedia.org\/wiki\/MyVu#cite_note-0)<\/sup>\n> \n> Myvu provides increased viewing [usability](http:\/\/en.wikipedia.org\/wiki\/Usability \"Usability\") and [portability](http:\/\/en.wikipedia.org\/wiki\/Portability \"Portability\") for users\n\n*Interesting, *I thought. I bought some the next day ;)*. *After the device was in my possession, I tested it out on the TV \u2013 pretty cool stuff\u2026 But then I had an idea \u2013 what if I could connect these to my computer \u2013 playing FPS\u2019s in these\u2019d be awesome! Turns out, though, that these glasses don\u2019t have a VGA interface \u2013 I then forked out some money for a vga-to-composite adapter:\n\n*![](http:\/\/vladsgadgets.com\/wp-content\/uploads\/2010\/10\/VGA_to_TV_Converter_Front_View.jpg \"vga-to-comp\")*\n\nOnce that had arrived, I started playing *Crysis *on these video glasses, but it wasn\u2019t really a fulfilling experience\u2026 Still having to use the mouse+keyboard* is kinda strange. *And so I thought \u2013 if i could find an accelerometer+gyro pretty cheap, I can track the person\u2019s head, and emulate the mouse for games! ( no easy feat, but it seemed like a good idea)\n\n*It was then that I found sparkfun electronics*, and put these items in my humble cart:\n\n- Atomic IMU (6 D.O.F )\n- USB FDTI breakout board\n\nOne for trackin\u2019, one for interfacin\u2019:\n\n![](http:\/\/www.robotshop.com\/Images\/big\/en\/sfe-atomic-imu-6-degrees-of-freedom-xbee-ready.jpg \"The IMU\")![](http:\/\/arduino.cc\/en\/uploads\/Guide\/ArduinoProMiniFTDIBreakout2.jpg \"FTDI\")\n\n*The first pic is the IMU, the thing on the left of the second picture is the FTDI*\n\nOh, and I also got some header strips to connect them as such:\n\n![](http:\/\/www.lipoly.de\/images\/sparkfun_09184.jpg \"Connected!\")\n\nAfter that was assembled \u2013 I just duct-taped it to the side of the video glasses (Not pretty, but works functionally, perfectly)\n\nI now had all the pieces I needed\u2026\n\n### Now for the hard part\u2026\n\nI then tasked myself with the objective of writing a program that interprets the accel. values, and translates it into mouse-movements and key-presses so I could use it in any game. I did this with a scripting language \u2013 called \u2018lite-c\u2019, basically it\u2019s c but with dropped standards and some 3d features built in. As a majority of you won\u2019t understand the syntax, I won\u2019t bother posting any code since I won\u2019t accomplish anything by doing so and, TBQH, the code isn\u2019t very pretty anyway.\n\nRunning everything I had, and seeing what I had done so far, a video:\n\n<I actually did end up making the video, but the quality (compression-wise) was so bad that I took it down>\n\n<But then I decided that the post is anticlimactic without it so I put it back ![;)](http:\/\/s1.wp.com\/wp-includes\/images\/smilies\/icon_wink.gif?m=1129645325g) \u00e2\u0080\u0093 skip to 3:05 to see it working>  \n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http:\/\/www.youtube.com\/embed\/wKyc2LVHsC4\" width=\"560\"><\/iframe>  \n \u00a0\n\n\n","html":"<p><strong>This is an old post on the topic and I have completely re-covered it <a title=\"Atomic IMU and some C++: A Generic VR system.\" href=\"http:\/\/www.sebholzapfel.com\/?p=82\">here<\/a><\/strong><\/p>\n<h3>A little Backstory<\/h3>\n<p>A couple of months ago I began building a VR-type system (headtracking, HUD etc), with the (rather ambitious) requirement that it would be able to interface into<em> any game that I throw at it. <\/em>I succeeded (mostly), but before I get into that, I&#8217;m going to give some story of how it came to be:<\/p>\n<h3>V.R &#8211; For Noobs?<\/h3>\n<p>I first came up with the idea when I (by chance) came across these MyVu devices on eBay:<\/p>\n<p><em><img class=\"alignnone\" title=\"VR glasses\" alt=\"\" src=\"http:\/\/www.coolest-gadgets.com\/wp-content\/uploads\/myvu-crystal-ev.jpg\" width=\"399\" height=\"234\" \/><\/em><\/p>\n<p><em><strong>Wikipedia:<\/strong><br \/>\n<\/em><\/p>\n<blockquote><p><strong>Myvu Personal Media Viewer<\/strong> refers to a product family of <a title=\"Head-mounted display\" href=\"http:\/\/en.wikipedia.org\/wiki\/Head-mounted_display\">wearable<\/a> <a title=\"Video display\" href=\"http:\/\/en.wikipedia.org\/wiki\/Video_display\">video display<\/a> glasses released by Myvu Corporation.<sup><a href=\"http:\/\/en.wikipedia.org\/wiki\/MyVu#cite_note-0\">[1]<\/a><\/sup><\/p>\n<p>Myvu provides increased viewing <a title=\"Usability\" href=\"http:\/\/en.wikipedia.org\/wiki\/Usability\">usability<\/a> and <a title=\"Portability\" href=\"http:\/\/en.wikipedia.org\/wiki\/Portability\">portability<\/a> for users<\/p><\/blockquote>\n<p><em>Interesting, <\/em>I thought. I bought some the next day ;)<em>. <\/em>After the device was in my possession, I tested it out on the TV &#8211; pretty cool stuff&#8230; But then I had an idea &#8211; what if I could connect these to my computer &#8211; playing FPS&#8217;s in these&#8217;d be awesome! Turns out, though, that these glasses don&#8217;t have a VGA interface &#8211; I then forked out some money for a vga-to-composite adapter:<\/p>\n<p><em><img class=\"alignnone\" title=\"vga-to-comp\" alt=\"\" src=\"http:\/\/vladsgadgets.com\/wp-content\/uploads\/2010\/10\/VGA_to_TV_Converter_Front_View.jpg\" width=\"380\" height=\"272\" \/><\/em><\/p>\n<p>Once that had arrived, I started playing <em>Crysis <\/em>on these video glasses, but it wasn&#8217;t really a fulfilling experience&#8230; Still having to use the mouse+keyboard<em> is kinda strange. <\/em>And so I thought &#8211; if i could find an accelerometer+gyro pretty cheap, I can track the person&#8217;s head, and emulate the mouse for games! ( no easy feat, but it seemed like a good idea)<\/p>\n<p><em>It was then that I found sparkfun electronics<\/em>, and put these items in my humble cart:<\/p>\n<ul>\n<li>Atomic IMU (6 D.O.F )<\/li>\n<li>USB FDTI breakout board<\/li>\n<\/ul>\n<p>One for trackin&#8217;, one for interfacin&#8217;:<\/p>\n<p><img class=\"alignnone\" title=\"The IMU\" alt=\"\" src=\"http:\/\/www.robotshop.com\/Images\/big\/en\/sfe-atomic-imu-6-degrees-of-freedom-xbee-ready.jpg\" width=\"250\" height=\"250\" \/><img class=\"alignnone\" title=\"FTDI\" alt=\"\" src=\"http:\/\/arduino.cc\/en\/uploads\/Guide\/ArduinoProMiniFTDIBreakout2.jpg\" width=\"403\" height=\"191\" \/><\/p>\n<p><em>The first pic is the IMU, the thing on the left of the second picture is the FTDI<\/em><\/p>\n<p>Oh, and I also got some header strips to connect them as such:<\/p>\n<p><img class=\"alignnone\" title=\"Connected!\" alt=\"\" src=\"http:\/\/www.lipoly.de\/images\/sparkfun_09184.jpg\" width=\"288\" height=\"288\" \/><\/p>\n<p>After that was assembled &#8211; I just duct-taped it to the side of the video glasses (Not pretty, but works functionally, perfectly)<\/p>\n<p>I now had all the pieces I needed&#8230;<\/p>\n<h3>Now for the hard part&#8230;<\/h3>\n<p>I then tasked myself with the objective of writing a program that interprets the accel. values, and translates it into mouse-movements and key-presses so I could use it in any game. I did this with a scripting language &#8211; called &#8216;lite-c&#8217;, basically it&#8217;s c but with dropped standards and some 3d features built in. As a majority of you won&#8217;t understand the syntax, I won&#8217;t bother posting any code since I won&#8217;t accomplish anything by doing so and, TBQH, the code isn&#8217;t very pretty anyway.<\/p>\n<p>Running everything I had, and seeing what I had done so far, a video:<\/p>\n<p>&lt;I actually did end up making the video, but the quality (compression-wise) was so bad that I took it down&gt;<\/p>\n<p>&lt;But then I decided that the post is anticlimactic without it so I put it back <img alt=\";)\" src=\"http:\/\/s1.wp.com\/wp-includes\/images\/smilies\/icon_wink.gif?m=1129645325g\" \/> \u2013 skip to 3:05 to see it working&gt;<br \/>\n<iframe width=\"560\" height=\"315\" src=\"http:\/\/www.youtube.com\/embed\/wKyc2LVHsC4\" frameborder=\"0\" allowfullscreen><\/iframe><br \/>\n&nbsp;<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 24 Apr 2011 15:17:04 +0000","created_by":1,"updated_at":"Fri, 25 Jan 2013 09:04:09 +0000","updated_by":1,"published_at":"Sun, 24 Apr 2011 15:17:04 +0000","published_by":1},{"id":63,"title":"TextSweeper - A Minesweeper that has gone console","slug":"textsweeper-a-minesweeper-that-has-gone-console","markdown":"\nIn all the time I spent at work experience with DPI IT (which was awesome, by the way) \u2013 I had a load of free time; in fact, in the 5 days I had there, there was about 7 hours of just sitting there doing nothing. My attempt at turning this time into something productive was this:\n\n\n# TextSweeper\u00c2\u00ae\n\n[![](\/wp-content\/uploads\/2011\/07\/2-300x266.png \"2\")](\/wp-content\/uploads\/2011\/07\/2.png)\n\nBasically \u2013 it\u2019s just minesweeper but it runs on console:-\n\n[Download it here (includes source)](http:\/\/www.mediafire.com\/?ov0497aqip2c5rp)\n\n(inside the archive is a \u2018bin\u2019 folder, the executable is in there) Download is half a meg \u2013 but that\u2019s only because of the bloated VC++ dlls \u2013 the actual program is 22KB.\n\nBut \u2013 if you\u2019re into code, I\u2019ve got something for you as well. I tried to use *some *sort of OO paradigm \u2013 and I did (sort of). The code for the SweeperBoard header and implementation (most of the code overall) are both pretty well commented and organised. On the other hand, the actual \u2018main\u2019 code (TextSweeper.cpp), well, isn\u2019t. Without further ado, here are the files on pastebin (They\u2019re also in the download):-\n\n[SweeperBoard.cpp](http:\/\/pastebin.com\/ViGXUrca)\n\n[SweeperBoard.h](http:\/\/pastebin.com\/ZCG01VNL)\n\n[TextSweeper.cpp](http:\/\/pastebin.com\/YdA1j1r2)\n\nI\u2019m happy for you to look at the code in the first two, but if you like a good hackjob don\u2019t hesitate to take a peek at the last. You should be able to compile this yourself, just setup files with the same names in visual studio, paste in the contents, and away you go.\n\n**Happy Text Sweepin\u2019!**\n\n\n","html":"<p>In all the time I spent at work experience with DPI IT (which was awesome, by the way) &#8211; I had a load of free time; in fact, in the 5 days I had there, there was about 7 hours of just sitting there doing nothing. My attempt at turning this time into something productive was this:<\/p>\n<h1 style=\"text-align: center;\">TextSweeper\u00ae<\/h1>\n<p><a href=\"\/wp-content\/uploads\/2011\/07\/2.png\"><img class=\"size-medium wp-image-71 aligncenter\" title=\"2\" alt=\"\" src=\"\/wp-content\/uploads\/2011\/07\/2-300x266.png\" width=\"300\" height=\"266\" \/><\/a><\/p>\n<p>Basically &#8211; it&#8217;s just minesweeper but it runs on console:-<\/p>\n<p style=\"text-align: center;\"><a href=\"http:\/\/www.mediafire.com\/?ov0497aqip2c5rp\">Download it here (includes source)<\/a><\/p>\n<p style=\"text-align: center;\">(inside the archive is a &#8216;bin&#8217; folder, the executable is in there) Download is half a meg &#8211; but that&#8217;s only because of the bloated VC++ dlls &#8211; the actual program is 22KB.<\/p>\n<p style=\"text-align: left;\">But &#8211; if you&#8217;re into code, I&#8217;ve got something for you as well. I tried to use <em>some <\/em>sort of OO paradigm &#8211; and I did (sort of). The code for the SweeperBoard header and implementation (most of the code overall) are both pretty well commented and organised. On the other hand, the actual &#8216;main&#8217; code (TextSweeper.cpp), well, isn&#8217;t. Without further ado, here are the files on pastebin (They&#8217;re also in the download):-<\/p>\n<p style=\"text-align: left;\"><a href=\"http:\/\/pastebin.com\/ViGXUrca\">SweeperBoard.cpp<\/a><\/p>\n<p style=\"text-align: left;\"><a href=\"http:\/\/pastebin.com\/ZCG01VNL\">SweeperBoard.h<\/a><\/p>\n<p style=\"text-align: left;\"><a href=\"http:\/\/pastebin.com\/YdA1j1r2\">TextSweeper.cpp<\/a><\/p>\n<p style=\"text-align: left;\">I&#8217;m happy for you to look at the code in the first two, but if you like a good hackjob don&#8217;t hesitate to take a peek at the last. You should be able to compile this yourself, just setup files with the same names in visual studio, paste in the contents, and away you go.<\/p>\n<p style=\"text-align: left;\"><strong>Happy Text Sweepin&#8217;!<\/strong><\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 02 Jul 2011 16:55:27 +0000","created_by":1,"updated_at":"Sun, 13 Jan 2013 19:57:17 +0000","updated_by":1,"published_at":"Sat, 02 Jul 2011 16:55:27 +0000","published_by":1},{"id":22,"title":"Contact","slug":"contact","markdown":"\n**Want to ask a question, recommend a topic, or even hire me?**\n\nIf it\u2019s too sensitive for comments, feel free to contact me through **schnommus at gmail dot com**\n\nAnd I\u2019ll see what I can do.\n\n\n","html":"<p><strong>Want to ask a question, recommend a topic, or even hire me?<\/strong><\/p>\n<p>If it&#8217;s too sensitive for comments, feel free to contact me through <strong>schnommus at gmail dot com<\/strong><\/p>\n<p>And I&#8217;ll see what I can do.<\/p>\n","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 23 Jan 2012 14:19:35 +0000","created_by":1,"updated_at":"Sat, 07 Jun 2014 14:22:07 +0000","updated_by":1,"published_at":"Mon, 23 Jan 2012 14:19:35 +0000","published_by":1},{"id":82,"title":"Atomic IMU and some C++: A Generic VR system.","slug":"atomic-imu-and-some-c-a-generic-vr-system","markdown":"\n#### I began to re-cover the topic but never finished the process. Maybe next holidays given more time. In the meantime you can watch an ancient video of it working in my [old post.](http:\/\/sebholzapfel.com\/?p=60)\n\n\u00a0\n\nUsing an [Atomic IMU](http:\/\/www.sparkfun.com\/products\/9812) from SparkFun, some [Video Glasses](http:\/\/www.productwiki.com\/upload\/images\/myvu_personal_media_viewer.jpg) from ebay, Some C++ and some duct-tape; a while ago I hacked together a Generic VR-type system. In this video I explain how it works, what I\u2019m up to, and what I\u2019m planning for it:\n\nA class for constructing from raw IMU data, checks validation and combines bytes:\n\nstruct IMU_Data { IMU_Data( unsigned char cp[] ) { s_frame = cp[0]; CombineBytes( &cp[1], sample_count ); CombineBytes( &cp[3], accel_x ); CombineBytes( &cp[5], accel_y ); CombineBytes( &cp[7], accel_z ); CombineBytes( &cp[9], pitch ); CombineBytes( &cp[11], roll ); CombineBytes( &cp[13], yaw ); e_frame = cp[15]; } void CombineBytes( unsigned char cp[], unsigned short &s) { s = unsigned short(cp[0]) << unsigned short(8); s += unsigned short(cp[1]); } bool IsValid() { return ( (s_frame == 'A') && (e_frame == 'Z') ); } char s_frame; unsigned short sample_count; unsigned short accel_x; unsigned short accel_y; unsigned short accel_z; unsigned short pitch; unsigned short roll; unsigned short yaw; char e_frame; };\n\n\n","html":"<h4>I began to re-cover the topic but never finished the process. Maybe next holidays given more time. In the meantime you can watch an ancient video of it working in my <a href=\"http:\/\/sebholzapfel.com\/?p=60\">old post.<\/a><\/h4>\n<p>&nbsp;<\/p>\n<p>Using an <a href=\"http:\/\/www.sparkfun.com\/products\/9812\">Atomic IMU<\/a> from SparkFun, some <a href=\"http:\/\/www.productwiki.com\/upload\/images\/myvu_personal_media_viewer.jpg\">Video Glasses<\/a> from ebay, Some C++ and some duct-tape; a while ago I hacked together a Generic VR-type system. In this video I explain how it works, what I&#8217;m up to, and what I&#8217;m planning for it:<\/p>\n<p>A class for constructing from raw IMU data, checks validation and combines bytes:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">struct IMU_Data {\r\n\tIMU_Data( unsigned char cp[] ) {\r\n\t\ts_frame = cp[0];\r\n\t\tCombineBytes( &amp;cp[1], sample_count );\r\n\t\tCombineBytes( &amp;cp[3], accel_x );\r\n\t\tCombineBytes( &amp;cp[5], accel_y );\r\n\t\tCombineBytes( &amp;cp[7], accel_z );\r\n\t\tCombineBytes( &amp;cp[9], pitch );\r\n\t\tCombineBytes( &amp;cp[11], roll );\r\n\t\tCombineBytes( &amp;cp[13], yaw );\r\n\t\te_frame = cp[15];\r\n\t}\r\n\r\n\tvoid CombineBytes( unsigned char cp[], unsigned short &amp;s) {\r\n\t\ts = unsigned short(cp[0]) &lt;&lt; unsigned short(8);\r\n\t\ts += unsigned short(cp[1]);\r\n\r\n\t}\r\n\r\n\tbool IsValid() {\r\n\t\treturn ( (s_frame == 'A') &amp;&amp; (e_frame == 'Z') );\r\n\t}\r\n\r\n\tchar s_frame;\r\n\tunsigned short sample_count;\r\n\tunsigned short accel_x;\r\n\tunsigned short accel_y;\r\n\tunsigned short accel_z;\r\n\tunsigned short pitch;\r\n\tunsigned short roll;\r\n\tunsigned short yaw;\r\n\tchar e_frame;\r\n};<\/pre>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 24 Jan 2012 10:43:40 +0000","created_by":1,"updated_at":"Fri, 25 Jan 2013 09:08:28 +0000","updated_by":1,"published_at":"Tue, 24 Jan 2012 10:43:40 +0000","published_by":1},{"id":88,"title":"4-bit Pic24 Alphanumeric LCD library","slug":"4-bit-pic24-alphanumeric-lcd-library","markdown":"\nLooking all over the internet, I could not find for the life of me any existing Alphanumeric LCD library for the C30 compiler \u2013 so I made one, which requires 6 pins to operate. It only has 3 commands; `lcd_print, lcd_command and lcd_init`. For printing anything more complex than a string, the standard library can be included and `sprintf` is used to format a temporary string to be sent the LCD\u2019s way. Files here are tested on a `PIC24FJ64GB002`, `MPLAB X 1.10`, `C30 3.30c`.\n\nAn example `main.c` file \u2013 Flashes an LED while displaying a switch position and ADC reading on an LCD:\n\n#include \"setup.h\" #include \"lcd.h\" #include <stdio.h> \/\/ Configuration setup _CONFIG1( FWDTEN_OFF & GWRP_OFF & GCP_OFF & JTAGEN_OFF & ICS_PGx3 ) _CONFIG2( FCKSM_CSDCMD & OSCIOFNC_ON & POSCMOD_HS & FNOSC_FRCPLL & I2C1SEL_PRI & PLL96MHZ_ON & PLLDIV_NODIV & IESO_OFF & IOL1WAY_OFF ); _CONFIG3( SOSCSEL_IO ); int main() { \/\/ Set the LED pin to an output TRISBbits.TRISB7 = 0; \/\/ Set the switch pin to input TRISBbits.TRISB8 = 1; lcd_init(); \/\/Initialize ADC AD1PCFGbits.PCFG9 = 0; \/\/ Enable analog pin 9 AD1CON3bits.ADCS = 0b00111111; \/\/ Set ADC clock to 64 x Tcy AD1CON1bits.SSRC = 0b111; \/\/ Auto-conversion on AD1CON3bits.SAMC = 0b00011; \/\/ Time bits = 3 TAD AD1CHS = 9; \/\/ Use positive input 9 on channel 0, relative to Avss AD1CON1bits.ADON = 1; \/\/Turn on ADC char final[32]; while(1) { lcd_command( LINE1 ); \/\/ Print out the switch status lcd_print( \"Switch: \" ); lcd_print( (PORTBbits.RB8 == 0)? \"On \" : \"Off \" ); lcd_command( LINE2 ); \/\/Print out the voltage on A9 AD1CON1bits.SAMP = 1; while( !AD1CON1bits.DONE ); float voltage = ((float)ADC1BUF0 * 3.3f)\/1024.0f; sprintf( final, \"Voltage: %3.2f \", voltage ); lcd_print( final ); LATBbits.LATB7 = ~LATBbits.LATB7; \/\/Toggle an LED __delay_ms( 100 ); } }\n\nThe library (and the example main file given) needs a `setup.h` file to be declared with some includes. I didn\u2019t put the device configuration bits in here, otherwise there\u2019s a linker error:\n\n\/\/ Includes some commonly used libraries, sets device configuration, \/\/ defines some useful things. #ifndef SETUP_H #define SETUP_H #include \"p24Fxxxx.h\" \/\/ This header will choose the right device header #define FCY 16000000UL \/\/ Running at 16 MIPS = Fosc\/2 #include <PIC24F_plib.h> #include <libpic30.h> \/\/ Define a C++-like boolean - makes things more readable in some cases typedef unsigned bool; #define true 1; #define false 0; #endif\n\nHere\u2019s your `lcd.h` code:\n\n\/\/ (c) Seb Holzapfel, 2012 \/\/ A 6-pin Alphanumeric LCD interface library #ifndef LCD_H #define LCD_H #include \"setup.h\" \/\/ Change these to the pins you want #define LCD_RS_PIN LATBbits.LATB0 #define LCD_E_PIN LATBbits.LATB1 #define LCD_D4_PIN LATBbits.LATB2 #define LCD_D5_PIN LATBbits.LATB3 #define LCD_D6_PIN LATBbits.LATB4 #define LCD_D7_PIN LATBbits.LATB5 #define LCD_RS_TRIS TRISBbits.TRISB0 #define LCD_E_TRIS TRISBbits.TRISB1 #define LCD_D4_TRIS TRISBbits.TRISB2 #define LCD_D5_TRIS TRISBbits.TRISB3 #define LCD_D6_TRIS TRISBbits.TRISB4 #define LCD_D7_TRIS TRISBbits.TRISB5 \/\/ LCD Command set #define LINE1 0x80 \/\/ Set display to line 1 character 0 #define LINE2 0xC0 \/\/ Set display to line 2 character 0 #define FUNCTION_SET 0x28 \/\/ 4 bits, 2 lines, 5x7 Font #define DISP_ON 0x0C \/\/ Display on #define DISP_ON_C 0x0E \/\/ Display on, Cursor on #define DISP_ON_B 0x0F \/\/ Display on, Cursor on, Blink cursor #define DISP_OFF 0x08 \/\/ Display off #define DISP_CLR 0x01 \/\/ Clear the Display #define ENTRY_INC 0x06 \/\/ Increment-mode, display shift OFF #define ENTRY_INC_S 0x07 \/\/ Increment-mode, display shift ON #define ENTRY_DEC 0x04 \/\/ Decrement-mode, display shift OFF #define ENTRY_DEC_S 0x05 \/\/ Decrement-mode, display shift ON #define DD_RAM_ADDR 0x80 \/\/ Least Significant 7-bit are for address #define LCD_DATA_MODE 1 #define LCD_COMMAND_MODE 0 void lcd_command( unsigned command ); void lcd_print( char text[] ); void lcd_init(); #endif\n\nAnd the `lcd.c` file:\n\n\/\/ (c) Seb Holzapfel, 2012 \/\/ A 6-pin Alphanumeric LCD interface library #include \"lcd.h\" #include <string.h> inline void lcd_toggle_enable() { LCD_E_PIN = 1; LCD_E_PIN = 0; } void lcd_mode( unsigned mode ) { LCD_RS_PIN = mode; __delay_us( 100 ); } void lcd_clock_nibble( unsigned char nibble ) { \/\/ Set data pins according to bitmask LCD_D4_PIN = ((nibble & 0b1 ) > 0); LCD_D5_PIN = ((nibble & 0b10 ) > 0); LCD_D6_PIN = ((nibble & 0b100 ) > 0); LCD_D7_PIN = ((nibble & 0b1000) > 0); \/\/ Clock them lcd_toggle_enable(); } void lcd_clock_byte( unsigned char byte ) { lcd_clock_nibble(byte >> 4); __delay_us( 50 ); lcd_clock_nibble(byte); __delay_us( 50 ); } void lcd_print( char text[] ) { \/\/ Incrementing pointers and checking for null doesn't work for some reason unsigned l = strlen(text); \/\/ So I used the inbuild length function. lcd_mode( LCD_DATA_MODE ); unsigned i; \/\/ Declaration outside because we're not in C99 mode. for( i = 0; i != l; ++i ) { lcd_clock_byte( text[i] ); } } void lcd_command( unsigned command ) { lcd_mode( LCD_COMMAND_MODE ); lcd_clock_byte( command ); __delay_ms(2); \/\/ Wait a bit, some commands take a while } void lcd_init() { __delay_ms( 20 ); \/\/ Set all LCD pins to output mode LCD_RS_TRIS = 0; LCD_E_TRIS = 0; LCD_D4_TRIS = 0; LCD_D5_TRIS = 0; LCD_D6_TRIS = 0; LCD_D7_TRIS = 0; LCD_E_PIN = 0; \/\/ Enter command mode lcd_mode( LCD_COMMAND_MODE ); \/\/ Initialisation sequence \/\/ Clock 0x03 twice lcd_clock_nibble( 0x03 ); __delay_ms( 5 ); lcd_clock_nibble( 0x03 ); __delay_us( 200 ); \/\/ Enter 4-bit mode lcd_clock_nibble( 0x03 ); __delay_us( 200 ); lcd_clock_nibble( 0x02 ); __delay_ms( 5 ); \/\/ Set up some defaults lcd_clock_byte( FUNCTION_SET ); lcd_clock_byte( DISP_OFF ); lcd_clock_byte( DISP_ON ); lcd_clock_byte( ENTRY_INC ); lcd_clock_byte( DISP_CLR ); lcd_clock_byte( LINE1 ); __delay_ms( 5 ); }\n\nUse my code for whatever you like (hobby use, commercial use, whatever) \u2013 If you use it for something interesting, be sure to let me know!\n\n\n","html":"<p>Looking all over the internet, I could not find for the life of me any existing Alphanumeric LCD library for the C30 compiler &#8211; so I made one, which requires 6 pins to operate. It only has 3 commands; <code>lcd_print, lcd_command and lcd_init<\/code>. For printing anything more complex than a string, the standard library can be included and <code>sprintf<\/code> is used to format a temporary string to be sent the LCD&#8217;s way. Files here are tested on a <code>PIC24FJ64GB002<\/code>, <code>MPLAB X 1.10<\/code>, <code>C30 3.30c<\/code>.<\/p>\n<p>An example <code>main.c<\/code> file &#8211; Flashes an LED while displaying a switch position and ADC reading on an LCD:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">#include &quot;setup.h&quot;\r\n#include &quot;lcd.h&quot;\r\n#include &lt;stdio.h&gt;\r\n\r\n\/\/ Configuration setup\r\n_CONFIG1( FWDTEN_OFF &amp; GWRP_OFF &amp; GCP_OFF &amp; JTAGEN_OFF &amp; ICS_PGx3 )\r\n_CONFIG2( FCKSM_CSDCMD &amp; OSCIOFNC_ON &amp; POSCMOD_HS &amp; FNOSC_FRCPLL &amp; I2C1SEL_PRI &amp; PLL96MHZ_ON &amp; PLLDIV_NODIV &amp; IESO_OFF &amp; IOL1WAY_OFF );\r\n_CONFIG3( SOSCSEL_IO );\r\n\r\nint main() {\r\n\t\/\/ Set the LED pin to an output\r\n\tTRISBbits.TRISB7 = 0;\r\n\r\n    \/\/ Set the switch pin to input\r\n\tTRISBbits.TRISB8 = 1;\r\n\r\n\tlcd_init();\r\n\r\n    \/\/Initialize ADC\r\n\r\n\tAD1PCFGbits.PCFG9 = 0; \/\/ Enable analog pin 9\r\n\r\n\tAD1CON3bits.ADCS = 0b00111111; \/\/ Set ADC clock to 64 x Tcy\r\n\tAD1CON1bits.SSRC = 0b111; \/\/ Auto-conversion on\r\n\tAD1CON3bits.SAMC = 0b00011; \/\/ Time bits = 3 TAD\r\n\r\n\tAD1CHS = 9; \/\/ Use positive input 9 on channel 0, relative to Avss\r\n\r\n\tAD1CON1bits.ADON = 1; \/\/Turn on ADC\r\n\r\n\tchar final[32];\r\n\r\n\twhile(1) {\r\n\t\tlcd_command( LINE1 ); \/\/ Print out the switch status\r\n\t\tlcd_print( &quot;Switch: &quot; );\r\n\t\tlcd_print( (PORTBbits.RB8 == 0)? &quot;On  &quot; : &quot;Off  &quot; );\r\n\r\n\t\tlcd_command( LINE2 ); \/\/Print out the voltage on A9\r\n\t\tAD1CON1bits.SAMP = 1;\r\n\t\twhile( !AD1CON1bits.DONE );\r\n\t\tfloat voltage = ((float)ADC1BUF0 * 3.3f)\/1024.0f;\r\n\t\tsprintf( final, &quot;Voltage: %3.2f  &quot;, voltage );\r\n\t\tlcd_print( final );\r\n\r\n\t\tLATBbits.LATB7 = ~LATBbits.LATB7; \/\/Toggle an LED\r\n\r\n\t\t__delay_ms( 100 );\r\n\t}\r\n}<\/pre>\n<p>The library (and the example main file given) needs a <code>setup.h<\/code> file to be declared with some includes. I didn&#8217;t put the device configuration bits in here, otherwise there&#8217;s a linker error:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">\/\/ Includes some commonly used libraries, sets device configuration,\r\n\/\/ defines some useful things.\r\n\r\n#ifndef SETUP_H\r\n#define SETUP_H\r\n\r\n#include &quot;p24Fxxxx.h&quot; \/\/ This header will choose the right device header\r\n\r\n#define FCY 16000000UL \/\/ Running at 16 MIPS = Fosc\/2\r\n\r\n#include &lt;PIC24F_plib.h&gt;\r\n#include &lt;libpic30.h&gt;\r\n\r\n\/\/ Define a C++-like boolean - makes things more readable in some cases\r\ntypedef unsigned bool;\r\n#define true 1;\r\n#define false 0;\r\n\r\n#endif<\/pre>\n<p>Here&#8217;s your <code>lcd.h<\/code> code:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">\/\/ (c) Seb Holzapfel, 2012\r\n\/\/ A 6-pin Alphanumeric LCD interface library\r\n\r\n#ifndef LCD_H\r\n#define LCD_H\r\n\r\n#include &quot;setup.h&quot;\r\n\r\n\/\/ Change these to the pins you want\r\n#define LCD_RS_PIN LATBbits.LATB0\r\n#define LCD_E_PIN  LATBbits.LATB1\r\n#define LCD_D4_PIN LATBbits.LATB2\r\n#define LCD_D5_PIN LATBbits.LATB3\r\n#define LCD_D6_PIN LATBbits.LATB4\r\n#define LCD_D7_PIN LATBbits.LATB5\r\n\r\n#define LCD_RS_TRIS TRISBbits.TRISB0\r\n#define LCD_E_TRIS  TRISBbits.TRISB1\r\n#define LCD_D4_TRIS TRISBbits.TRISB2\r\n#define LCD_D5_TRIS TRISBbits.TRISB3\r\n#define LCD_D6_TRIS TRISBbits.TRISB4\r\n#define LCD_D7_TRIS TRISBbits.TRISB5\r\n\r\n\/\/ LCD Command set\r\n#define\tLINE1   \t0x80   \t\/\/ Set display to line 1 character 0\r\n#define\tLINE2           0xC0   \t\/\/ Set display to line 2 character 0\r\n#define\tFUNCTION_SET \t0x28   \t\/\/ 4 bits, 2 lines, 5x7 Font\r\n#define\tDISP_ON         0x0C   \t\/\/ Display on\r\n#define\tDISP_ON_C       0x0E   \t\/\/ Display on, Cursor on\r\n#define\tDISP_ON_B       0x0F   \t\/\/ Display on, Cursor on, Blink cursor\r\n#define\tDISP_OFF        0x08  \t\/\/ Display off\r\n#define\tDISP_CLR        0x01   \t\/\/ Clear the Display\r\n#define\tENTRY_INC       0x06   \t\/\/ Increment-mode, display shift OFF\r\n#define\tENTRY_INC_S     0x07   \t\/\/ Increment-mode, display shift ON\r\n#define\tENTRY_DEC       0x04   \t\/\/ Decrement-mode, display shift OFF\r\n#define\tENTRY_DEC_S     0x05   \t\/\/ Decrement-mode, display shift ON\r\n#define\tDD_RAM_ADDR     0x80   \t\/\/ Least Significant 7-bit are for address\r\n\r\n#define LCD_DATA_MODE 1\r\n#define LCD_COMMAND_MODE 0\r\n\r\nvoid lcd_command( unsigned command );\r\n\r\nvoid lcd_print( char text[] );\r\n\r\nvoid lcd_init();\r\n\r\n#endif<\/pre>\n<p>And the <code>lcd.c<\/code> file:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">\/\/ (c) Seb Holzapfel, 2012\r\n\/\/ A 6-pin Alphanumeric LCD interface library\r\n\r\n#include &quot;lcd.h&quot;\r\n#include &lt;string.h&gt;\r\n\r\ninline void lcd_toggle_enable() {\r\n\tLCD_E_PIN = 1;\r\n\tLCD_E_PIN = 0;\r\n}\r\n\r\nvoid lcd_mode( unsigned mode ) {\r\n\tLCD_RS_PIN = mode;\r\n\t__delay_us( 100 );\r\n}\r\n\r\nvoid lcd_clock_nibble( unsigned char nibble ) {\r\n\r\n\t\/\/ Set data pins according to bitmask\r\n\tLCD_D4_PIN = ((nibble &amp; 0b1   ) &gt; 0);\r\n\tLCD_D5_PIN = ((nibble &amp; 0b10  ) &gt; 0);\r\n\tLCD_D6_PIN = ((nibble &amp; 0b100 ) &gt; 0);\r\n\tLCD_D7_PIN = ((nibble &amp; 0b1000) &gt; 0);\r\n\r\n\t\/\/ Clock them\r\n\tlcd_toggle_enable();\r\n}\r\n\r\nvoid lcd_clock_byte( unsigned char byte ) {\r\n\tlcd_clock_nibble(byte &gt;&gt; 4);\r\n\t__delay_us( 50 );\r\n\tlcd_clock_nibble(byte);\r\n\t__delay_us( 50 );\r\n}\r\n\r\nvoid lcd_print( char text[] ) {\r\n\t\/\/ Incrementing pointers and checking for null doesn't work for some reason\r\n\tunsigned l = strlen(text); \/\/ So I used the inbuild length function.\r\n\r\n\tlcd_mode( LCD_DATA_MODE );\r\n\r\n\tunsigned i; \/\/ Declaration outside because we're not in C99 mode.\r\n\tfor( i = 0; i != l; ++i ) {\r\n\t\tlcd_clock_byte( text[i] );\r\n\t}\r\n}\r\n\r\nvoid lcd_command( unsigned command ) {\r\n\tlcd_mode( LCD_COMMAND_MODE );\r\n\tlcd_clock_byte( command );\r\n\t__delay_ms(2); \/\/ Wait a bit, some commands take a while\r\n}\r\n\r\nvoid lcd_init() {\r\n\t__delay_ms( 20 );\r\n\r\n\t\/\/ Set all LCD pins to output mode\r\n\tLCD_RS_TRIS = 0;\r\n\tLCD_E_TRIS  = 0;\r\n\tLCD_D4_TRIS = 0;\r\n\tLCD_D5_TRIS = 0;\r\n\tLCD_D6_TRIS = 0;\r\n\tLCD_D7_TRIS = 0;\r\n\r\n\tLCD_E_PIN = 0;\r\n\r\n\t\/\/ Enter command mode\r\n\tlcd_mode( LCD_COMMAND_MODE );\r\n\r\n\t\/\/ Initialisation sequence\r\n\r\n\t\/\/ Clock 0x03 twice\r\n\tlcd_clock_nibble( 0x03 );\r\n\t__delay_ms( 5 );\r\n\tlcd_clock_nibble( 0x03 );\r\n\t__delay_us( 200 );\r\n\r\n\t\/\/ Enter 4-bit mode\r\n\tlcd_clock_nibble( 0x03 );\r\n\t__delay_us( 200 );\r\n\tlcd_clock_nibble( 0x02 );\r\n\t__delay_ms( 5 );\r\n\r\n\t\/\/ Set up some defaults\r\n\tlcd_clock_byte( FUNCTION_SET );\r\n\tlcd_clock_byte( DISP_OFF );\r\n\tlcd_clock_byte( DISP_ON );\r\n\tlcd_clock_byte( ENTRY_INC );\r\n\tlcd_clock_byte( DISP_CLR );\r\n\tlcd_clock_byte( LINE1 );\r\n\r\n\t__delay_ms( 5 );\r\n}<\/pre>\n<p>Use my code for whatever you like (hobby use, commercial use, whatever) &#8211; If you use it for something interesting, be sure to let me know!<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 07 Mar 2012 17:48:50 +0000","created_by":1,"updated_at":"Mon, 14 Jan 2013 15:19:48 +0000","updated_by":1,"published_at":"Wed, 07 Mar 2012 17:48:50 +0000","published_by":1},{"id":168,"title":"Projects","slug":"slider","markdown":"\n<div style=\"text-align: center; margin: 0 auto !important;\">[soliloquy id=\"152\"]<\/div>- - - - - -\n\n- [SebPS](http:\/\/sebholzapfel.com\/?p=221 \"SebPS\"): A constant current\/voltage linear power supply with digital programmability\n- [Playing with JavaScript](http:\/\/sebholzapfel.com\/?p=245 \"Playing with Javascript\"): Using Javascript for purposes it wasn\u2019t intended? Yes, please!\n- [PiBreak](http:\/\/sebholzapfel.com\/?p=303 \"PiBreak\"): A hardware-accelerated C++ Breakout clone for the RasPi embedded linux platform.\n- [Metanact](http:\/\/sebholzapfel.com\/?p=366 \"Metanact\"): A C++ fast-paced 2D action space-shooter, levels taking place within your own filesystem\n- [PyMU](http:\/\/sebholzapfel.com\/?p=265 \"PyMU\"): A ruddy fast real-time serial IMU datalogging application.\n- [4-bit Pic24 LCD library](http:\/\/sebholzapfel.com\/?p=88 \"4-bit Pic24 Alphanumeric LCD library\"): A simple HD44780 LCD library that uses less pins than usual; written in c for Microchip\u2019s C30 compiler.\n- [T3DL](http:\/\/sebholzapfel.com\/?p=394 \"A terminal-based 3D model viewer\"): A cross-platform 3D model viewer that rasterizes to a terminal window\n- [UberHexagon: ](http:\/\/sebholzapfel.com\/?p=400 \"Uber Hexagon \u00e2\u0080\u0093 An HTML5, Super Hexagon inspired seziure inducer.\")An HTML5, Super Hexagon inspired seizure inducer.\n- [UberDrive](http:\/\/sebholzapfel.com\/?p=374 \"The UberDrive\"): Fiddling around with the PIC24 USB stack generates the world\u2019s sexiest thumbdrive.\n- [TextSweeper](http:\/\/sebholzapfel.com\/?p=63 \"TextSweeper \u00e2\u0080\u0093 A Minesweeper that has gone console\"): Basically minesweeper, gone console in C++\n- [Musical Endeavors](https:\/\/soundcloud.com\/sebastianholzwaffle): I enjoy playing and composing songs in my spare time. Listen if you dare.\n- [Procrastination and 40k](http:\/\/sebholzapfel.com\/?p=335): Procrastination spent productively.\n\n\n","html":"<div style=\"text-align: center; margin: 0 auto !important;\">[soliloquy id=\"152\"]<\/div>\n<p><\/p>\n<hr \/>\n<\/p>\n<ul>\n<li><a title=\"SebPS\" href=\"http:\/\/sebholzapfel.com\/?p=221\">SebPS<\/a>: A constant current\/voltage linear power supply with digital programmability<\/li>\n<li><a title=\"Playing with Javascript\" href=\"http:\/\/sebholzapfel.com\/?p=245\">Playing with JavaScript<\/a>: Using Javascript for purposes it wasn&#8217;t intended? Yes, please!<\/li>\n<li><a title=\"PiBreak\" href=\"http:\/\/sebholzapfel.com\/?p=303\">PiBreak<\/a>: A hardware-accelerated C++ Breakout clone for the RasPi embedded linux platform.<\/li>\n<li><a title=\"Metanact\" href=\"http:\/\/sebholzapfel.com\/?p=366\">Metanact<\/a>: A C++ fast-paced 2D action space-shooter, levels taking place within your own filesystem<\/li>\n<li><a title=\"PyMU\" href=\"http:\/\/sebholzapfel.com\/?p=265\">PyMU<\/a>: A ruddy fast real-time serial IMU datalogging application.<\/li>\n<li><a title=\"4-bit Pic24 Alphanumeric LCD library\" href=\"http:\/\/sebholzapfel.com\/?p=88\">4-bit Pic24 LCD library<\/a>: A simple HD44780 LCD library that uses less pins than usual; written in c for Microchip&#8217;s C30 compiler.<\/li>\n<li><a title=\"A terminal-based 3D model viewer\" href=\"http:\/\/sebholzapfel.com\/?p=394\">T3DL<\/a>: A cross-platform 3D model viewer that rasterizes to a terminal window<\/li>\n<li><a title=\"Uber Hexagon \u2013 An HTML5, Super Hexagon inspired seziure inducer.\" href=\"http:\/\/sebholzapfel.com\/?p=400\">UberHexagon: <\/a>An HTML5, Super Hexagon inspired seizure inducer.<\/li>\n<li><a title=\"The UberDrive\" href=\"http:\/\/sebholzapfel.com\/?p=374\">UberDrive<\/a>: Fiddling around with the PIC24 USB stack generates the world&#8217;s sexiest thumbdrive.<\/li>\n<li><a title=\"TextSweeper \u2013 A Minesweeper that has gone console\" href=\"http:\/\/sebholzapfel.com\/?p=63\">TextSweeper<\/a>: Basically minesweeper, gone console in C++<\/li>\n<li><a href=\"https:\/\/soundcloud.com\/sebastianholzwaffle\">Musical Endeavors<\/a>: I enjoy playing and composing songs in my spare time. Listen if you dare.<\/li>\n<li><a href=\"http:\/\/sebholzapfel.com\/?p=335\">Procrastination and 40k<\/a>: Procrastination spent productively.<\/li>\n<\/ul>\n","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 17 Dec 2012 11:06:47 +0000","created_by":1,"updated_at":"Sat, 07 Jun 2014 13:16:10 +0000","updated_by":1,"published_at":"Mon, 17 Dec 2012 11:06:47 +0000","published_by":1},{"id":221,"title":"SebPS","slug":"sebps","markdown":"\n[![SebPS<br \/><br \/><br \/><br \/><br \/><br \/><br \/><br \/><br \/><br \/><br \/><br \/>\nA constant current\/voltage linear power<br \/><br \/><br \/><br \/><br \/><br \/><br \/><br \/><br \/><br \/><br \/><br \/>\nsupply with digital programmability](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2012\/12\/dps-copy-300x187.jpg)](http:\/\/sebholzapfel.com\/?attachment_id=201)\n\n### OUTLINE\n\nBeginning year 11 my electronics workbench was quite decked out; the only thing missing was a decent DC power supply. Reading around online, good ones with decent range and constant current capability were going to set me back at least 150$ (quite a lot for the cash-strapped student I was!); so I decided to make one.\n\nAfter a few weeks of spending the odd school afternoon perfecting prototype circuits, simulating, and slowly piecing a master-circuit together, I had a working schematic.The following weekend I layed out a PCB in EAGLE and sent it off to [iTead Studio](http:\/\/iteadstudio.com\/) to get manufactured. When the board had finally arrived, I ordered all of the components from Element14 (which were shipped and arrived the next day surprisingly) and assembled the thing (a process that took a little less than half a day \u2013 which included using the dremel to cut out panel holes etc).\n\nAmazingly, when I turned it on the first time to begin programming, the on-board chip was recognized and everything seemed to be working! I then stuck the firmware on there that I had developed intermittently whilst waiting for the board to arrive \u2014 there were a few bugs, but nothing that a couple of hours extra work couldn\u2019t fix; except the devices current-readings were slightly out (A hardware issue, I have narrowed it down to resistor tolerances and will substitute a couple with potentiometers in the near future).\n\n### The circuit\n\n[![dpscircuit](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2012\/12\/dpscircuit-300x223.png)](http:\/\/sebholzapfel.com\/?attachment_id=230)\n\n(you probably want to follow the image link twice to view it properly)\n\nRunning along the top isn\u2019t all that interesting, we have on the left the sockets for the DC input and fuseholder alongside some bypass capacitance for stability. Then we have 2 regulators; a 5v for the LCD, and a 3.3v for the microcontroller. Followed by this we have a little subcircuit for the power LED, then four buttons with pull-down resistors.\n\nThe majority of the analog+interesting circuitry lies mid-left of the schematic. 0-3.3v RC-filtered PWM from the microcontroller enters V_SET and IC1A, which drives two transistors in a darlington configuration, a smaller 2n2222 (Q1) followed by a higher-power heatsinked 2n3055 (EXT). IC1A is set up as an amplifier whereby feedback comes from the darlington\u2019s output and is divided so that 12v scales to 3.3v (also read by V_READ). This has the effect that 0-3.3v from the micro corresponds to an adjustable 0-12v at up to 1 amp across V_OUT. Notice that Q2, when turned on, will zero the voltage output as it switches off the darlington pair \u2013 this is used for current limiting which is explained later.\n\nR8 is the 0.5 ohm current-sense resistor, the voltage-drop is amplified by IC1B in a differential-amplifier configuration whereby 0-0.5v sensed corresponds to 0-3.3v being output.This is then sent straight back to the micro through I_READ, and also compared (by an op-amp acting as a comparator) with I_SET in IC1C. The output of this is fed into the base of Q2 (described earlier), which consequently means that current is limited according to the voltage output by the micro at I_SET. The output of IC1C is also compared with a fixed, relatively low voltage and directly drives a \u2018current limiting active\u2019 LED.\n\nThe last part of the analog circuitry lies around V_OUT. To the right is some bypass capacitance, and to the left is a constant-current sink IC (LM334Z) configured to run at 1mA. This was required as in my breadboarding tests the circuit was unstable at currents under ~200 microamps. The offset this causes to the current reading is negated in software.\n\nThe other parts of the circuit are mostly digital, the micro and its boilerplate components as well as the lcd, some programming headers and an IO expansion header.\n\n### Construction\n\nThe PCB was designed to fit inside a Hammond model 1598BSGYPBK case (from specification as I didn\u2019t actually have the case at the time), mounted with 6 screws. When the case arrived, I soldered the components onto the PCB, mounted the rear power transistor and heatsink, cut out panel holes with a drill and dremel and then gradually pieced the thing together.\n\n### Pricing\n\nOverall, the project cost me somewhere in the region of 140$, but this figure is inclusive of unused components as well as the 11 other copies of the PCB I ordered (12 is the minimum order, for a cost of about 40$) and a 30$ 15v 2amp power-pack from the local Jaycar store.\n\nAs the components totalled ~70$, I could have easily wiped off 30$ by ordering from a larger distributor (i.e digikey) and not ordering any excess components. Also, with the manufacture of more than one unit, the PCBs would have only cost ~3$ each. The powerpack can probably be purchased off of Ebay significantly cheaper also (lets say 20$). Considering these changes, individual units could quite realistically be built for somewhere around 55$ \u2013 a lot less than the 150$ item that I had originally considered for purchase.\n\nAll in all, I ended up spending about the same amount of money I would have spent had I simply a purchased a proven supply. The learning experience that accompanied my route however, I believe has strengthened my electronics background quite reasonably.\n\n\n","html":"<p style=\"text-align: center;\"><a href=\"http:\/\/sebholzapfel.com\/?attachment_id=201\" rel=\"attachment wp-att-201\"><img class=\"size-medium wp-image-201\" alt=\"SebPS&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;<br \/>\nA constant current\/voltage linear power&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;&lt;br \/&gt;<br \/>\nsupply with digital programmability\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2012\/12\/dps-copy-300x187.jpg\" width=\"300\" height=\"187\" \/><\/a><\/p>\n<h3 class=\"size-medium wp-image-201\" style=\"text-align: center;\">OUTLINE<\/h3>\n<p>Beginning year 11 my electronics workbench was quite decked out; the only thing missing was a decent DC power supply. Reading around online, good ones with decent range and constant current capability were going to set me back at least 150$ (quite a lot for the cash-strapped student I was!); so I decided to make one.<\/p>\n<p>After a few weeks of spending the odd school afternoon perfecting prototype circuits, simulating, and slowly piecing a master-circuit together, I had a working schematic.The following weekend I layed out a PCB in EAGLE and sent it off to <a href=\"http:\/\/iteadstudio.com\/\">iTead Studio<\/a> to get manufactured. When the board had finally arrived, I ordered all of the components from Element14 (which were shipped and arrived the next day surprisingly) and assembled the thing (a process that took a little less than half a day &#8211; which included using the dremel to cut out panel holes etc).<\/p>\n<p>Amazingly, when I turned it on the first time to begin programming, the on-board chip was recognized and everything seemed to be working! I then stuck the firmware on there that I had developed intermittently whilst waiting for the board to arrive &#8212; there were a few bugs, but nothing that a couple of hours extra work couldn&#8217;t fix; except the devices current-readings were slightly out (A hardware issue, I have narrowed it down to resistor tolerances and will substitute a couple with potentiometers in the near future).<\/p>\n<h3 style=\"text-align: center;\">The circuit<\/h3>\n<p><a href=\"http:\/\/sebholzapfel.com\/?attachment_id=230\" rel=\"attachment wp-att-230\"><img class=\"size-medium wp-image-230 aligncenter\" alt=\"dpscircuit\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2012\/12\/dpscircuit-300x223.png\" width=\"300\" height=\"223\" \/><\/a><\/p>\n<p>(you probably want to follow the image link twice to view it properly)<\/p>\n<p>Running along the top isn&#8217;t all that interesting, we have on the left the sockets for the DC input and fuseholder alongside some bypass capacitance for stability. Then we have 2 regulators; a 5v for the LCD, and a 3.3v for the microcontroller. Followed by this we have a little subcircuit for the power LED, then four buttons with pull-down resistors.<\/p>\n<p>The majority of the analog+interesting circuitry lies mid-left of the schematic. 0-3.3v RC-filtered PWM from the microcontroller enters V_SET and IC1A, which drives two transistors in a darlington configuration, a smaller 2n2222 (Q1) followed by a higher-power heatsinked 2n3055 (EXT). IC1A is set up as an amplifier whereby feedback comes from the darlington&#8217;s output and is divided so that 12v scales to 3.3v (also read by V_READ). This has the effect that 0-3.3v from the micro corresponds to an adjustable 0-12v at up to 1 amp across V_OUT. Notice that Q2, when turned on, will zero the voltage output as it switches off the darlington pair &#8211; this is used for current limiting which is explained later.<\/p>\n<p>R8 is the 0.5 ohm current-sense resistor, the voltage-drop is amplified by IC1B in a differential-amplifier configuration whereby 0-0.5v sensed corresponds to 0-3.3v being output.This is then sent straight back to the micro through I_READ, and also compared (by an op-amp acting as a comparator) with I_SET in IC1C. The output of this is fed into the base of Q2 (described earlier), which consequently means that current is limited according to the voltage output by the micro at I_SET. The output of IC1C is also compared with a fixed, relatively low voltage and directly drives a &#8216;current limiting active&#8217; LED.<\/p>\n<p>The last part of the analog circuitry lies around V_OUT. To the right is some bypass capacitance, and to the left is a constant-current sink IC (LM334Z) configured to run at 1mA. This was required as in my breadboarding tests the circuit was unstable at currents under ~200 microamps. The offset this causes to the current reading is negated in software.<\/p>\n<p>The other parts of the circuit are mostly digital, the micro and its boilerplate components as well as the lcd, some programming headers and an IO expansion header.<\/p>\n<h3 style=\"text-align: center;\">Construction<\/h3>\n<p>The PCB was designed to fit inside a Hammond model 1598BSGYPBK case (from specification as I didn&#8217;t actually have the case at the time), mounted with 6 screws. When the case arrived, I soldered the components onto the PCB, mounted the rear power transistor and heatsink, cut out panel holes with a drill and dremel and then gradually pieced the thing together.<\/p>\n<h3 style=\"text-align: center;\">Pricing<\/h3>\n<p>Overall, the project cost me somewhere in the region of 140$, but this figure is inclusive of unused components as well as the 11 other copies of the PCB I ordered (12 is the minimum order, for a cost of about 40$) and a 30$ 15v 2amp power-pack from the local Jaycar store.<\/p>\n<p>As the components totalled ~70$, I could have easily wiped off 30$ by ordering from a larger distributor (i.e digikey) and not ordering any excess components. Also, with the manufacture of more than one unit, the PCBs would have only cost ~3$ each. The powerpack can probably be purchased off of Ebay significantly cheaper also (lets say 20$). Considering these changes, individual units could quite realistically be built for somewhere around 55$ &#8211; a lot less than the 150$ item that I had originally considered for purchase.<\/p>\n<p>All in all, I ended up spending about the same amount of money I would have spent had I simply a purchased a proven supply. The learning experience that accompanied my route however, I believe has strengthened my electronics background quite reasonably.<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 20 Dec 2012 11:23:26 +0000","created_by":1,"updated_at":"Sun, 13 Jan 2013 20:06:05 +0000","updated_by":1,"published_at":"Thu, 20 Dec 2012 11:23:26 +0000","published_by":1},{"id":245,"title":"Playing with Javascript","slug":"playing-with-javascript","markdown":"\n### School productivity\n\nOur Software Design lessons at school have always been competitive, classmates competing for the shortest code, the most interesting project ideas etc. The fruits of one of these unofficial \u2018competitions\u2019 though, I think is worth a write-up; the JavaScript Challenge. The challenge was to create animated, interesting graphics in JavaScript using only ASCII characters. Classmates probably wouldn\u2019t be too happy if I stuck their submissions online, hence I\u2019ll only supply my own. With all due modesty though, the nearest competitor was a white spiral generator, which didn\u2019t animate \u2013 so you\u2019re not missing out on much :P\n\n### take 1. a sine wave\n\nView it [here](http:\/\/sebholzapfel.com\/js_stuff\/sinewave\/js_sine.html). Quite simple (in comparison), the page consists of a mono-space grid of spaces and digits iterating horizontally using the sine function and a mutated delta value for animation.\n\n### Take 2. A Cube\n\nView it [here](http:\/\/sebholzapfel.com\/js_stuff\/cube_single\/jscube.html). A big step up, this demonstration uses projection transformation, 3D mathematics and matrices to draw the illusion of a rotating cube.\n\nBasically, the way it works is that each of the cube\u2019s vertices is defined in a stationary position (x, y, z), all stored in a larger array. Each iteration, an angular transform is performed on every point, followed by a distance transformation, then the result displayed on the screen and vertices interpolated between using Bresenham\u2019s line algorithm.\n\n \/\/ Perform an angular matrix transform (aint that fun to say :D ), angles in radians. function AngularTransform( result, original, heading, pitch, bank ) { for( var i = 0; i != result.length; ++i ) { \/\/ Yes, this is the simplest possible way of doing it ;) -- besides maybe a massive lookup table result[i].x = (Math.cos(heading)*Math.cos(bank)+Math.sin(heading)*Math.sin(pitch)*Math.sin(bank))*original[i].x + (-Math.cos(heading)*Math.sin(bank)+Math.sin(heading)*Math.sin(pitch)*Math.cos(bank))*original[i].y + (Math.sin(heading)*Math.cos(pitch))*original[i].z; result[i].y = (Math.sin(bank)*Math.cos(pitch))*original[i].x + (Math.cos(bank)*Math.cos(pitch))*original[i].y + (-Math.sin(pitch))*original[i].z; result[i].z = (-Math.sin(heading)*Math.cos(bank)+Math.cos(heading)*Math.sin(pitch)*Math.sin(bank))*original[i].x + (Math.sin(bank)*Math.sin(heading)+Math.cos(heading)*Math.sin(pitch)*Math.cos(bank))*original[i].y + (Math.cos(heading)*Math.cos(pitch))*original[i].z; } return result; }\n\nAbove is the code for the angular transform. It accepts 3 angles in radians, transforming an input vector around the origin by these angles, and then returning the result. The core of the function looks complex, but it is a simply the result of the input vector multiplied by the equation for [Euler angles in matrix form.](http:\/\/en.wikipedia.org\/wiki\/Rotation_matrix#General_rotations)\n\nvar px = Math.floor((shape[i].x + offset.x) \/ (shape[i].z+Z_OFF)*V_DIST) + SIZE_Y\/2; var py = Math.floor((shape[i].y + offset.y) \/ (shape[i].z+Z_OFF)*V_DIST) + SIZE_X\/2;\n\nAnd those 2 lines perform the distance transformation (generate the view projection), which basically means that objects with a greater Z coordinate look smaller, as they do in reality \u2013 A simple inverse relationship between Z and the size of X and Y in relation to zero.\n\n### Take 3. A cubefield\n\nView it [here](http:\/\/sebholzapfel.com\/js_stuff\/cube_multi\/jscubes.html). The last piece of graphic JS I worked on, it\u2019s basically a simple extension of the code for the display of a single cube. An array of cubes randomly spawn, Z coordinates decreasing towards the screen until zero and then the cubes respawning. To save processing time, all of the cubes use the same angular transform; hence they are all rotated by the same angle at the same time \u2013 but they use a different position transformation and so appear at different positions.\n\n### The end?\n\nThe code in each of these examples is reasonably commented, and I invite anyone who\u2019s curious to look at all of the page sources and maybe even alter them into something new.. An in-browser 3D space-invaders clone using only ASCII characters would be interesting *nudge nudge.\n\n\n","html":"<h3 class=\"size-medium wp-image-196\" style=\"text-align: center;\">School productivity<\/h3>\n<p>Our Software Design lessons at school have always been competitive, classmates competing for the shortest code, the most interesting project ideas etc. The fruits of one of these unofficial &#8216;competitions&#8217; though, I think is worth a write-up; the JavaScript Challenge. The challenge was to create animated, interesting graphics in JavaScript using only ASCII characters. Classmates probably wouldn&#8217;t be too happy if I stuck their submissions online, hence I&#8217;ll only supply my own. With all due modesty though, the nearest competitor was a white spiral generator, which didn&#8217;t animate &#8211; so you&#8217;re not missing out on much :P<\/p>\n<h3 style=\"text-align: center;\">take 1. a sine wave<\/h3>\n<p>View it <a href=\"http:\/\/sebholzapfel.com\/js_stuff\/sinewave\/js_sine.html\">here<\/a>. Quite simple (in comparison), the page consists of a mono-space grid of spaces and digits iterating horizontally using the sine function and a mutated delta value for animation.<\/p>\n<h3 style=\"text-align: center;\">Take 2. A Cube<\/h3>\n<p>View it <a href=\"http:\/\/sebholzapfel.com\/js_stuff\/cube_single\/jscube.html\">here<\/a>. A big step up, this demonstration uses projection transformation, 3D mathematics and matrices to draw the illusion of a rotating cube.<\/p>\n<p>Basically, the way it works is that each of the cube&#8217;s vertices is defined in a stationary position (x, y, z), all stored in a larger array. Each iteration, an angular transform is performed on every point, followed by a distance transformation, then the result displayed on the screen and vertices interpolated between using Bresenham&#8217;s line algorithm.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/ Perform an angular matrix transform (aint that fun to say :D ), angles in radians.\r\nfunction AngularTransform( result, original, heading, pitch, bank ) {\r\n\r\n\tfor( var i = 0; i != result.length; ++i ) {\r\n\r\n\t\t\/\/ Yes, this is the simplest possible way of doing it ;) -- besides maybe a massive lookup table\r\n\r\n\t\tresult[i].x = (Math.cos(heading)*Math.cos(bank)+Math.sin(heading)*Math.sin(pitch)*Math.sin(bank))*original[i].x +\r\n\r\n\t\t\t\t\t  (-Math.cos(heading)*Math.sin(bank)+Math.sin(heading)*Math.sin(pitch)*Math.cos(bank))*original[i].y +\r\n\r\n\t\t\t\t\t  (Math.sin(heading)*Math.cos(pitch))*original[i].z;\r\n\r\n\t\tresult[i].y = (Math.sin(bank)*Math.cos(pitch))*original[i].x +\r\n\r\n\t\t\t\t\t  (Math.cos(bank)*Math.cos(pitch))*original[i].y +\r\n\r\n\t\t\t\t\t  (-Math.sin(pitch))*original[i].z;\r\n\r\n\t\tresult[i].z = (-Math.sin(heading)*Math.cos(bank)+Math.cos(heading)*Math.sin(pitch)*Math.sin(bank))*original[i].x +\r\n\r\n\t\t\t\t\t  (Math.sin(bank)*Math.sin(heading)+Math.cos(heading)*Math.sin(pitch)*Math.cos(bank))*original[i].y +\r\n\r\n\t\t\t\t\t  (Math.cos(heading)*Math.cos(pitch))*original[i].z;\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n<\/pre>\n<p>Above is the code for the angular transform. It accepts 3 angles in radians, transforming an input vector around the origin by these angles, and then returning the result. The core of the function looks complex, but it is a simply the result of the input vector multiplied by the equation for <a href=\"http:\/\/en.wikipedia.org\/wiki\/Rotation_matrix#General_rotations\">Euler angles in matrix form.<\/a><\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">var px = Math.floor((shape[i].x + offset.x) \/ (shape[i].z+Z_OFF)*V_DIST) + SIZE_Y\/2;\r\nvar py = Math.floor((shape[i].y + offset.y) \/ (shape[i].z+Z_OFF)*V_DIST) + SIZE_X\/2;<\/pre>\n<p>And those 2 lines perform the distance transformation (generate the view projection), which basically means that objects with a greater Z coordinate look smaller, as they do in reality &#8211; A simple inverse relationship between Z and the size of X and Y in relation to zero.<\/p>\n<h3 style=\"text-align: center;\">Take 3. A cubefield<\/h3>\n<p>View it <a href=\"http:\/\/sebholzapfel.com\/js_stuff\/cube_multi\/jscubes.html\">here<\/a>. The last piece of graphic JS I worked on, it&#8217;s basically a simple extension of the code for the display of a single cube. An array of cubes randomly spawn, Z coordinates decreasing towards the screen until zero and then the cubes respawning. To save processing time, all of the cubes use the same angular transform; hence they are all rotated by the same angle at the same time &#8211; but they use a different position transformation and so appear at different positions.<\/p>\n<h3 style=\"text-align: center;\">The end?<\/h3>\n<p>The code in each of these examples is reasonably commented, and I invite anyone who&#8217;s curious to look at all of the page sources and maybe even alter them into something new.. An in-browser 3D space-invaders clone using only ASCII characters would be interesting *nudge nudge.<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 01 Jan 2013 13:01:27 +0000","created_by":1,"updated_at":"Sun, 13 Jan 2013 20:05:59 +0000","updated_by":1,"published_at":"Tue, 01 Jan 2013 13:01:27 +0000","published_by":1},{"id":265,"title":"PyMU","slug":"pymu","markdown":"\n<div class=\"wp-caption aligncenter\" id=\"attachment_199\" style=\"width: 310px\">[![](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2012\/12\/pymu-300x187.png)](http:\/\/sebholzapfel.com\/?attachment_id=199)Screenshot\n\n<\/div>### A need for read\n\nAbout a year ago I purchased an \u2018atomic IMU\u2019 unit from Sparkfun ( for completeness, an IMU is an Inertial Measurement Unit, providing readings in (usually) >= 6 dimensions of global and angular acceleration ). Since then, I have used it in a few projects \u2013 a gyro mouse for a virtual reality headset (link), measuring the deceleration of a toy car for a physics demonstration; and as a nice test data-source for serial communication fiddling. Recently I had familiarized myself a little with the PyQt GUI framework, and was in a search for small project ideas to reinforce what I was learning \u2013 a serial reader for this device seemed adequate as it uses a few different GUI functions; real-time graph plots, buttons, timing, form input, dynamic resizing\u2026\n\n### Stage 1. Python communication\n\nFirst task was to actually get the data from the device into the computer\u2019s memory. I\u2019d previously done serial comms using windows sockets in C++, but I guessed that there\u2019s probably an easier way in Python, it being the renown high-level language it is. Fortunately, a couple of minutes on Google lead me to PySerial, which was perfect. Opening the IMU was only a couple of function calls:\n\n import serial serialPort = None def InitIMU(port, baudrate=115200): global serialPort serialPort = serial.Serial(port, baudrate, timeout=0.1) serialPort.close() #Sometimes the port needs to be closed first serialPort.open() serialPort.write('#') #Send the 'begin' signal\n\nYeah, I know, globals are bad. I don\u2019t usually do this but my OOP in python isn\u2019t fantastic so I just abused a global as a poor-man\u2019s singleton :P. Anyway, after the IMU was open, I just read 16-bit integers, 2 bytes at a time, iterating over input readings into a custom storage class (between sentinels, this code is from inside a loop):\n\n#Add a new, empty reading l.append( IMUReading() ) #Combines 2 bytes into an integer def ReadInt16(cnt): return 256*ord(bytes[cnt+1])+ord(bytes[cnt+2]) #Look at every even window to get the numbers, sticking them in the latest (empty) reading #Couldn't really come up with a cleaner way other than just incrementing the indices l[-1].count = ReadInt16(i);i+=2 l[-1].accel.x = ReadInt16(i);i+=2 l[-1].accel.y = ReadInt16(i);i+=2 l[-1].accel.z = ReadInt16(i);i+=2 l[-1].gyro.x = ReadInt16(i);i+=2 l[-1].gyro.y = ReadInt16(i);i+=2 l[-1].gyro.z = ReadInt16(i);i+=2\n\nAgain, nothing extravagant here, just reading data the way the IMU spec supplies them.\n\n### Stage 2: something to look at\n\nOnce the serial comms were working, I moved onto the GUI. Qt Designer is good like that, dragging spacers, buttons and windows onto the screen is swift and easy. In place of where the graphs would be in the final application, I dropped QGraphicsView objects. It was then, after some research, that I realised it would be easiest to use a 3rd-party graphing library rather than going from scratch with basic plotting functions. As it turns out, most people use Qwt for this \u2013 however I wasn\u2019t convinced of it\u2019s real-time performance; so instead I used PyQtGraph which \u2014 although not thoroughly documented, I found easy enough to use. For example, inside my main loop, retrieving, filtering and displaying data from the IMU every frame was only a few lines:\n\nif IMUReader.serialPort != None: data.Update() accelxcurve.setData(list(data.filtered.accel.x)) accelycurve.setData(list(data.filtered.accel.y)) accelzcurve.setData(list(data.filtered.accel.z)) gyroxcurve.setData(list(data.filtered.gyro.x)) gyroycurve.setData(list(data.filtered.gyro.y)) gyrozcurve.setData(list(data.filtered.gyro.z))\n\nAfter hooking input and button events to some functions and passing variables around, the application was working nicely. For the curious individual, the entire source code is available [here](https:\/\/www.dropbox.com\/s\/53qrn8t33m8yk5a\/PyMU.zip), and requires Python 2.7 with PyQt, PyQtGraph and PySerial installed.\n\n\n","html":"<div id=\"attachment_199\" class=\"wp-caption aligncenter\" style=\"width: 310px\"><a href=\"http:\/\/sebholzapfel.com\/?attachment_id=199\" rel=\"attachment wp-att-199\"><img class=\"size-medium wp-image-199\" alt=\"\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2012\/12\/pymu-300x187.png\" width=\"300\" height=\"187\" \/><\/a><p class=\"wp-caption-text\">Screenshot<\/p><\/div>\n<h3 style=\"text-align: center;\">A need for read<\/h3>\n<p>About a year ago I purchased an &#8216;atomic IMU&#8217; unit from Sparkfun ( for completeness, an IMU is an Inertial Measurement Unit, providing readings in (usually) &gt;= 6 dimensions of global and angular acceleration ). Since then, I have used it in a few projects &#8211; a gyro mouse for a virtual reality headset (link), measuring the deceleration of a toy car for a physics demonstration; and as a nice test data-source for serial communication fiddling. Recently I had familiarized myself a little with the PyQt GUI framework, and was in a search for small project ideas to reinforce what I was learning &#8211; a serial reader for this device seemed adequate as it uses a few different GUI functions; real-time graph plots, buttons, timing, form input, dynamic resizing&#8230;<\/p>\n<h3 style=\"text-align: center;\">Stage 1. Python communication<\/h3>\n<p>First task was to actually get the data from the device into the computer&#8217;s memory. I&#8217;d previously done serial comms using windows sockets in C++, but I guessed that there&#8217;s probably an easier way in Python, it being the renown high-level language it is. Fortunately, a couple of minutes on Google lead me to PySerial, which was perfect. Opening the IMU was only a couple of function calls:<\/p>\n<pre class=\"brush: python; title: ; notranslate\" title=\"\">\r\nimport serial\r\n\r\nserialPort = None\r\n\r\ndef InitIMU(port, baudrate=115200):\r\n\tglobal serialPort\r\n\tserialPort = serial.Serial(port, baudrate, timeout=0.1)\r\n\tserialPort.close() #Sometimes the port needs to be closed first\r\n\tserialPort.open()\r\n\tserialPort.write('#') #Send the 'begin' signal<\/pre>\n<p>Yeah, I know, globals are bad. I don&#8217;t usually do this but my OOP in python isn&#8217;t fantastic so I just abused a global as a poor-man&#8217;s singleton :P. Anyway, after the IMU was open, I just read 16-bit integers, 2 bytes at a time, iterating over input readings into a custom storage class (between sentinels, this code is from inside a loop):<\/p>\n<pre class=\"brush: python; title: ; notranslate\" title=\"\">#Add a new, empty reading\r\nl.append( IMUReading() )\r\n\r\n#Combines 2 bytes into an integer\r\ndef ReadInt16(cnt): return 256*ord(bytes[cnt+1])+ord(bytes[cnt+2])\r\n\r\n#Look at every even window to get the numbers, sticking them in the latest (empty) reading\r\n#Couldn't really come up with a cleaner way other than just incrementing the indices\r\nl[-1].count = ReadInt16(i);i+=2\r\nl[-1].accel.x = ReadInt16(i);i+=2\r\nl[-1].accel.y = ReadInt16(i);i+=2\r\nl[-1].accel.z = ReadInt16(i);i+=2\r\nl[-1].gyro.x = ReadInt16(i);i+=2\r\nl[-1].gyro.y = ReadInt16(i);i+=2\r\nl[-1].gyro.z = ReadInt16(i);i+=2<\/pre>\n<p>Again, nothing extravagant here, just reading data the way the IMU spec supplies them.<\/p>\n<h3 style=\"text-align: center;\">Stage 2: something to look at<\/h3>\n<p>Once the serial comms were working, I moved onto the GUI. Qt Designer is good like that, dragging spacers, buttons and windows onto the screen is swift and easy. In place of where the graphs would be in the final application, I dropped QGraphicsView objects. It was then, after some research, that I realised it would be easiest to use a 3rd-party graphing library rather than going from scratch with basic plotting functions. As it turns out, most people use Qwt for this &#8211; however I wasn&#8217;t convinced of it&#8217;s real-time performance; so instead I used PyQtGraph which &#8212; although not thoroughly documented, I found easy enough to use. For example, inside my main loop, retrieving, filtering and displaying data from the IMU every frame was only a few lines:<\/p>\n<pre class=\"brush: python; title: ; notranslate\" title=\"\">if IMUReader.serialPort != None: data.Update()\r\n\r\naccelxcurve.setData(list(data.filtered.accel.x))\r\naccelycurve.setData(list(data.filtered.accel.y))\r\naccelzcurve.setData(list(data.filtered.accel.z))\r\ngyroxcurve.setData(list(data.filtered.gyro.x))\r\ngyroycurve.setData(list(data.filtered.gyro.y))\r\ngyrozcurve.setData(list(data.filtered.gyro.z))<\/pre>\n<p>After hooking input and button events to some functions and passing variables around, the application was working nicely. For the curious individual, the entire source code is available <a href=\"https:\/\/www.dropbox.com\/s\/53qrn8t33m8yk5a\/PyMU.zip\">here<\/a>, and requires Python 2.7 with PyQt, PyQtGraph and PySerial installed.<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 11 Jan 2013 16:45:03 +0000","created_by":1,"updated_at":"Mon, 14 Jan 2013 09:42:47 +0000","updated_by":1,"published_at":"Fri, 11 Jan 2013 16:45:03 +0000","published_by":1},{"id":303,"title":"PiBreak","slug":"pibreak","markdown":"\n<div class=\"wp-caption aligncenter\" id=\"attachment_206\" style=\"width: 310px\">[![](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2012\/12\/pibreak-300x187.jpg)](http:\/\/sebholzapfel.com\/?attachment_id=206)Screenshot\n\n<\/div>### A new platform\n\nWith all the buzz surrounding the raspberry pi (an arm-based embedded Linux platform) at the time of it\u2019s release, I decided to buy one. After fiddling around with the Wheezy terminal and checking out a few applications, I decided to write a game for it. As a challenge, I decided to use C++ and have the thing be hardware accelerated. After thinking for a short while and sketching some mockups in Photoshop, a breakout clone was decided upon; and so began research into libraries to assist me.\n\n### Libraries on libraries\n\nAt the time of writing, at least, there was no existing C++ framework wrapping OpenGL (ES) on the raspberry pi that I could find. After almost an hour of searching in corners of the internet though, I found an (at the time) unfinished GLES framework written in C ([link](https:\/\/github.com\/chriscamacho\/gles2framework)). So I spent a couple of hours mashing up an object-oriented library, with entity support, wrapping the existing C library. The source can be downloaded at the end of this post, but just for demonstration\u2019s sake, this is the sort of thing that the library wraps:\n\nGLESapp::GLESapp( GLESlogic &logic ) : quit(false), num_frames(0), l(logic) { if (makeContext() != 0) { std::cout << \"Failed to create OpenGL context, exiting.\" << std::endl; exit(-1); } std::cout << \"OpenGL context created at \" << getDisplayWidth() << \"x\" << getDisplayHeight() << \" pixels\" << std::endl; std::cout << \"Initialising viewport\" << std::endl; \/\/ Bunch of OpenGL initialisation stuff glActiveTexture(GL_TEXTURE0); glViewport(0, 0, getDisplayWidth(), getDisplayHeight()); initGlPrint(getDisplayWidth(), getDisplayHeight()); initSprite(getDisplayWidth(), getDisplayHeight()); glCullFace(GL_BACK); glEnable(GL_CULL_FACE); glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); glEnable(GL_BLEND); glDisable(GL_DEPTH_TEST); glClearColor(0.0f, 0.0f, 0.0f, 1); \/\/ Background colour (black) std::cout << \"Hooking input\" << std::endl; keys = getKeys(); \/\/ Get pointer to key array mouse = getMouse(); \/\/ Same for mouse std::cout << \"Creating debug font\" << std::endl; font1 = createFont(\"glesfw\/resources\/textures\/font.png\",0,256,16,16,16); std::cout << \"Calling user-defined logic\" << std::endl; l._SetApp(this); l.Init(); }\n\nEntity support is present in a class who\u2019s methods can be overloaded as such:\n\nclass myEntity : public GLESentity { public: virtual void Init() { \/* Called when object is created *\/ } virtual void Update() { \/* Called every frame *\/ } virtual void Destroy() { \/* Called just before an object is destroyed *\/ } };\n\nThe methods are automagically called once an entity has been added to an applications or deleted with these members:\n\nGLESapp::AddEntity( GLESentity *e ) GLESapp::DeleteEntity( GLESentity *e ) \/\/e.g GLESapp a(logic); a.AddEntity( new myEntity ); a.Run(); \/\/ myEntity will delete itself when the program terminates\n\n### Time for the game\n\nSo, after initially demoing the library a little, I set to work on the actual game. First task was to figure out how levels would actually be constructed; I settled on a custom filetype that would be loaded for each level. Photoshop was used to create images at quite a low resolution (20\u00d712 \u2013 with lots of magnification!), which were then fed through a little python script (I used PIL, which made the task wonderfully simple):\n\nfrom PIL import Image i=Image.open(\"pitiny.png\") pt = {}; cnt = 1 for y in range(0,i.size[1]): for x in range(0,i.size[0]): cp = i.getpixel( (x, y) ) try: if pt[cp] != 1: print pt[cp], x, y except: pt[cp] = cnt cnt += 1 if pt[cp] != 1: print pt[cp], x, y\n\nBelow is a snippet of what the script spits out; they are just pretty long files with a list of block types and x, y coordinates following:\n\n3 15 5 3 19 5 4 5 6 3 6 6\n\nWhich were then loaded into the program via C++\u2019s standard library (this listing is the application\u2019s overloaded Init() routine):\n\nvirtual void Init() { \/\/ Open a file and read the level out of it std::ifstream ifs; ifs.open(\"pi_xy.dat\", std::ios::in); if( !ifs.is_open() ) { throw std::runtime_error(\"Could not load level \\'pi_xy\\'\"); } while(1) { int type, x, y; ifs >> type >> x >> y; if(ifs.eof()) break; if( type > 0 && type < 5 ) app->AddEntity( new Block(x*60 + getDisplayWidth()\/2-(60*20\/2), y*40+40, type) ); } ifs.close(); \/\/ After loading the level, add a bat app->AddEntity( new Bat( getDisplayWidth()\/2, getDisplayHeight()-70 ) ); }\n\nFor a peek into how independent entities were coded, here is the listing for the Bat class. It responds to input from the keyboard and moves left or right with smooth velocity changes, and draws itself with a PNG texture loaded from a file (Members inlined for clarity):\n\nclass Bat : public GLESentity { public: Bat(float xp=0, float yp=0) { this->x=xp; this->y=yp; v=0;} virtual void Init() { this->tid = app->GetTextureFromPNG(\"bat.png\"); \/\/ Set width & height (Note if this is not set the sprite is too small to see) this->w = 120; this->h = 30; } virtual void Update() { \/\/ Check keys and move accordingly if( app->keys[KEY_CURSL] ) v -= 3; else if ( app->keys[KEY_CURSR] ) v += 3; else v += -(v\/10.0); \/\/Slowly reduce velocity when no keys down \/\/ Clamp bat to screen, bouncing off corners if( this->x > getDisplayWidth()-60 ) { this->x = getDisplayWidth()-60; v = -v*0.4; } if( this->x < 60 ) { this->x = 60; v = -v*0.4; } x += v; \/\/ Apply the velocity app->DrawEntity(this); } virtual void Destroy() { } float v; };\n\nThe compilable source + binaries with raspi-compatible Makefile are available [here](https:\/\/www.dropbox.com\/s\/66k5g0bngc7k8hb\/PiBreak.zip). I don\u2019t claim supreme ownership over the library (much of the more complex OpenGL routines are handled by Chris\u2019s C library!), so use it for whatever you like, following Chris\u2019s license also; crediting me would be nice but not required. As it stands, the application is unfinished (there\u2019s no ball yet, only a level and a moving bat!), but I believe it still demonstrates the capabilities of the raspberry pi and I obtained a pretty sizable chunk of Linux development knowledge from making this application. If school slows down a little I might have a crack at ball physics in the near future (I wonder if Box2D would compile on the RasPi..).\n\n\n","html":"<div id=\"attachment_206\" class=\"wp-caption aligncenter\" style=\"width: 310px\"><a href=\"http:\/\/sebholzapfel.com\/?attachment_id=206\" rel=\"attachment wp-att-206\"><img class=\"size-medium wp-image-206\" alt=\"\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2012\/12\/pibreak-300x187.jpg\" width=\"300\" height=\"187\" \/><\/a><p class=\"wp-caption-text\">Screenshot<\/p><\/div>\n<h3 style=\"text-align: center;\">A new platform<\/h3>\n<p>With all the buzz surrounding the raspberry pi (an arm-based embedded Linux platform) at the time of it&#8217;s release, I decided to buy one. After fiddling around with the Wheezy terminal and checking out a few applications, I decided to write a game for it. As a challenge, I decided to use C++ and have the thing be hardware accelerated. After thinking for a short while and sketching some mockups in Photoshop, a breakout clone was decided upon; and so began research into libraries to assist me.<\/p>\n<h3 style=\"text-align: center;\">Libraries on libraries<\/h3>\n<p>At the time of writing, at least, there was no existing C++ framework wrapping OpenGL (ES) on the raspberry pi that I could find. After almost an hour of searching in corners of the internet though, I found an (at the time) unfinished GLES framework written in C (<a href=\"https:\/\/github.com\/chriscamacho\/gles2framework\">link<\/a>). So I spent a couple of hours mashing up an object-oriented library, with entity support, wrapping the existing C library. The source can be downloaded at the end of this post, but just for demonstration&#8217;s sake, this is the sort of thing that the library wraps:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">GLESapp::GLESapp( GLESlogic &amp;logic ) : quit(false), num_frames(0), l(logic) {\r\n\tif (makeContext() != 0) {\r\n\t\tstd::cout &lt;&lt; &quot;Failed to create OpenGL context, exiting.&quot; &lt;&lt; std::endl;\r\n\t\texit(-1);\r\n\t}\r\n\r\n\tstd::cout &lt;&lt; &quot;OpenGL context created at &quot; &lt;&lt; getDisplayWidth() &lt;&lt; &quot;x&quot; &lt;&lt; getDisplayHeight() &lt;&lt; &quot; pixels&quot; &lt;&lt; std::endl;\r\n\r\n\tstd::cout &lt;&lt; &quot;Initialising viewport&quot; &lt;&lt; std::endl;\r\n\r\n\t\/\/ Bunch of OpenGL initialisation stuff\r\n\tglActiveTexture(GL_TEXTURE0);\r\n\tglViewport(0, 0, getDisplayWidth(), getDisplayHeight());\r\n\tinitGlPrint(getDisplayWidth(), getDisplayHeight());\r\n\tinitSprite(getDisplayWidth(), getDisplayHeight());\r\n\tglCullFace(GL_BACK);\r\n\tglEnable(GL_CULL_FACE);\r\n\tglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\r\n\tglEnable(GL_BLEND);\r\n\tglDisable(GL_DEPTH_TEST);\r\n\tglClearColor(0.0f, 0.0f, 0.0f, 1); \/\/ Background colour (black)\r\n\r\n\tstd::cout &lt;&lt; &quot;Hooking input&quot; &lt;&lt; std::endl;\r\n\r\n\tkeys = getKeys(); \/\/ Get pointer to key array\r\n\tmouse = getMouse(); \/\/ Same for mouse\r\n\r\n\tstd::cout &lt;&lt; &quot;Creating debug font&quot; &lt;&lt; std::endl;\r\n\tfont1 = createFont(&quot;glesfw\/resources\/textures\/font.png&quot;,0,256,16,16,16);\r\n\r\n\tstd::cout &lt;&lt; &quot;Calling user-defined logic&quot; &lt;&lt; std::endl;\r\n\r\n\tl._SetApp(this);\r\n\tl.Init();\r\n}<\/pre>\n<p>Entity support is present in a class who&#8217;s methods can be overloaded as such:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">class myEntity : public GLESentity {\r\npublic:\r\n\tvirtual void Init() { \/* Called when object is created *\/ }\r\n\tvirtual void Update() { \/* Called every frame *\/ }\r\n\tvirtual void Destroy() { \/* Called just before an object is destroyed *\/ }\r\n};<\/pre>\n<p>The methods are automagically called once an entity has been added to an applications or deleted with these members:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">GLESapp::AddEntity( GLESentity *e )\r\nGLESapp::DeleteEntity( GLESentity *e )\r\n\/\/e.g\r\nGLESapp a(logic);\r\na.AddEntity( new myEntity );\r\na.Run(); \/\/ myEntity will delete itself when the program terminates<\/pre>\n<h3 style=\"text-align: center;\">Time for the game<\/h3>\n<p>So, after initially demoing the library a little, I set to work on the actual game. First task was to figure out how levels would actually be constructed; I settled on a custom filetype that would be loaded for each level. Photoshop was used to create images at quite a low resolution (20&#215;12 &#8211; with lots of magnification!), which were then fed through a little python script (I used PIL, which made the task wonderfully simple):<\/p>\n<pre class=\"brush: python; title: ; notranslate\" title=\"\">from PIL import Image\r\ni=Image.open(&quot;pitiny.png&quot;)\r\npt = {}; cnt = 1\r\nfor y in range(0,i.size[1]):\r\n    for x in range(0,i.size[0]):\r\n        cp = i.getpixel( (x, y) )\r\n        try:\r\n            if pt[cp] != 1:\r\n                print pt[cp], x, y\r\n        except:\r\n            pt[cp] = cnt\r\n            cnt += 1\r\n            if pt[cp] != 1:\r\n                print pt[cp], x, y<\/pre>\n<p>Below is a snippet of what the script spits out; they are just pretty long files with a list of block types and x, y coordinates following:<\/p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">3 15 5\r\n3 19 5\r\n4 5 6\r\n3 6 6<\/pre>\n<p>Which were then loaded into the program via C++&#8217;s standard library (this listing is the application&#8217;s overloaded Init() routine):<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">virtual void Init() {\r\n\r\n\t\/\/ Open a file and read the level out of it\r\n\tstd::ifstream ifs;\r\n\tifs.open(&quot;pi_xy.dat&quot;, std::ios::in);\r\n\r\n\tif( !ifs.is_open() ) {\r\n\t\tthrow std::runtime_error(&quot;Could not load level \\'pi_xy\\'&quot;);\r\n\t}\r\n\r\n\twhile(1) {\r\n\t\tint type, x, y;\r\n\t\tifs &gt;&gt; type &gt;&gt; x &gt;&gt; y;\r\n\t\tif(ifs.eof()) break;\r\n\t\tif( type &gt; 0 &amp;&amp; type &lt; 5 ) \t\t\tapp-&gt;AddEntity( new Block(x*60 + getDisplayWidth()\/2-(60*20\/2), y*40+40, type) );\r\n\t}\r\n\r\n\tifs.close();\r\n\r\n\t\/\/ After loading the level, add a bat\r\n\tapp-&gt;AddEntity( new Bat( getDisplayWidth()\/2, getDisplayHeight()-70 ) );\r\n}<\/pre>\n<p>For a peek into how independent entities were coded, here is the listing for the Bat class. It responds to input from the keyboard and moves left or right with smooth velocity changes, and draws itself with a PNG texture loaded from a file (Members inlined for clarity):<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">class Bat : public GLESentity {\r\npublic:\r\n\tBat(float xp=0, float yp=0) { this-&gt;x=xp; this-&gt;y=yp; v=0;}\r\n\tvirtual void Init() {\r\n\t\tthis-&gt;tid = app-&gt;GetTextureFromPNG(&quot;bat.png&quot;);\r\n\r\n\t\t\/\/ Set width &amp; height (Note if this is not set the sprite is too small to see)\r\n\t\tthis-&gt;w = 120;\r\n\t\tthis-&gt;h = 30;\r\n\t}\r\n\r\n\tvirtual void Update() {\r\n\t\t\/\/ Check keys and move accordingly\r\n\t\tif( app-&gt;keys[KEY_CURSL] )\r\n\t\t\tv -= 3;\r\n\t\telse if ( app-&gt;keys[KEY_CURSR] )\r\n\t\t\tv += 3;\r\n\t\telse\r\n\t\t\tv += -(v\/10.0); \/\/Slowly reduce velocity when no keys down\r\n\r\n\t\t\/\/ Clamp bat to screen, bouncing off corners\r\n\t\tif( this-&gt;x &gt; getDisplayWidth()-60 ) { this-&gt;x = getDisplayWidth()-60; v = -v*0.4; }\r\n\t\tif( this-&gt;x &lt; 60 ) { this-&gt;x = 60; v = -v*0.4; }\r\n\r\n\t\tx += v; \/\/ Apply the velocity\r\n\r\n\t\tapp-&gt;DrawEntity(this);\r\n\t}\r\n\r\n\tvirtual void Destroy() { }\r\n\tfloat v;\r\n};<\/pre>\n<p>The compilable source + binaries with raspi-compatible Makefile are available <a href=\"https:\/\/www.dropbox.com\/s\/66k5g0bngc7k8hb\/PiBreak.zip\">here<\/a>. I don&#8217;t claim supreme ownership over the library (much of the more complex OpenGL routines are handled by Chris&#8217;s C library!), so use it for whatever you like, following Chris&#8217;s license also; crediting me would be nice but not required. As it stands, the application is unfinished (there&#8217;s no ball yet, only a level and a moving bat!), but I believe it still demonstrates the capabilities of the raspberry pi and I obtained a pretty sizable chunk of Linux development knowledge from making this application. If school slows down a little I might have a crack at ball physics in the near future (I wonder if Box2D would compile on the RasPi..).<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 12 Jan 2013 08:32:43 +0000","created_by":1,"updated_at":"Sat, 20 Apr 2013 10:45:46 +0000","updated_by":1,"published_at":"Sat, 12 Jan 2013 08:32:43 +0000","published_by":1},{"id":335,"title":"Procrastination and 40K","slug":"procrastination-and-40k","markdown":"\nProbably not something which increases my employment prospects, I thought I should stick this up here. Anyway, myself and a bunch of friends roll dice and pretend to destroy plastic every second Sunday. For anyone who\u2019s familiar with 40k, I play Necrons and over the years have accumulated a little over 2000 points of the time-absorbing buggers. Against a nice backdrop of computing books so that I don\u2019t forget my priorities, a picture:  \n[![Necrons](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2013\/01\/image_1357951322635254.jpg)](http:\/\/sebholzapfel.com\/?attachment_id=336)\n\nOf course, I usually have the little guys packed up in boxes so visitors aren\u2019t confronted by their deadly beauty too much.\n\nRunning roughly from back-left across, I have a Monolith, an Annihilation Barge, a Night scythe, 5 Lychguard, 5 Immortals, A Necron Lord, Nemesor Zahndrekh, Vargard Obyron, a generic Overlord, a Cryptek, 16 Warriors, and a bunch of [2 squads of 7 and 1 squad of 8] Canoptek Scarabs. A close-up of a kitbashed warrior aside a regular one:\n\n[![hammer](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2013\/01\/hammer.jpg)](http:\/\/sebholzapfel.com\/?attachment_id=345)Yeah, my camera isn\u2019t all that fantastic but I think you can see the kind-of ceramic look I\u2019ve aimed for with these guys. To finish, goddamn Tau, taken during one of our mini-tournaments (Don\u2019t ask how it happened):[![taubuggery](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2013\/01\/taubuggery.jpg)](http:\/\/sebholzapfel.com\/?attachment_id=347)\n\n\n","html":"<p>Probably not something which increases my employment prospects, I thought I should stick this up here. Anyway, myself and a bunch of friends roll dice and pretend to destroy plastic every second Sunday. For anyone who&#8217;s familiar with 40k, I play Necrons and over the years have accumulated a little over 2000 points of the time-absorbing buggers. Against a nice backdrop of computing books so that I don&#8217;t forget my priorities, a picture:<br \/>\n<a href=\"http:\/\/sebholzapfel.com\/?attachment_id=336\" rel=\"attachment wp-att-336\"><img class=\"aligncenter size-full wp-image-336\" alt=\"Necrons\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2013\/01\/image_1357951322635254.jpg\" width=\"960\" height=\"720\" \/><\/a><\/p>\n<p>Of course, I usually have the little guys packed up in boxes so visitors aren&#8217;t confronted by their deadly beauty too much.<\/p>\n<p>Running roughly from back-left across, I have a Monolith, an Annihilation Barge, a Night scythe, 5 Lychguard, 5 Immortals, A Necron Lord, Nemesor Zahndrekh, Vargard Obyron, a generic Overlord, a Cryptek, 16 Warriors, and a bunch of [2 squads of 7 and 1 squad of 8] Canoptek Scarabs. A close-up of a kitbashed warrior aside a regular one:<\/p>\n<p><a href=\"http:\/\/sebholzapfel.com\/?attachment_id=345\" rel=\"attachment wp-att-345\"><img class=\"aligncenter size-full wp-image-345\" alt=\"hammer\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2013\/01\/hammer.jpg\" width=\"881\" height=\"559\" \/><\/a>Yeah, my camera isn&#8217;t all that fantastic but I think you can see the kind-of ceramic look I&#8217;ve aimed for with these guys. To finish, goddamn Tau, taken during one of our mini-tournaments (Don&#8217;t ask how it happened):<a href=\"http:\/\/sebholzapfel.com\/?attachment_id=347\" rel=\"attachment wp-att-347\"><img class=\"aligncenter size-full wp-image-347\" alt=\"taubuggery\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2013\/01\/taubuggery.jpg\" width=\"960\" height=\"720\" \/><\/a><\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 12 Jan 2013 10:45:40 +0000","created_by":1,"updated_at":"Sun, 13 Jan 2013 20:04:50 +0000","updated_by":1,"published_at":"Sat, 12 Jan 2013 10:45:40 +0000","published_by":1},{"id":366,"title":"Metanact","slug":"metanact","markdown":"\n**UPDATE: This thing\u2019s now on [IndieGogo](http:\/\/igg.me\/at\/metanact)! The below material is severely outdated :)**\n\n### \n\n### Overview\n\nMetanact is a fast-paced 2D spaceshooter whereby the game is played in the user\u2019s filesystem \u2013 directories and files are each displayed as in-game objects. As this is an HSC project of mine, I\u2019m unsure of the rules associated with distributing source-code, documentation etc; basically \u2013 I\u2019ll keep much of it under wraps until the project is handed in \u2014 probably around October this year. Without doing too much harm, the game is written in C++, uses SFML for rendering and media and depends on Boost for a portable directory-traversal mechanism. We hand in updated project logs at regular intervals and have our assessment marked partially every term.\n\n### Demo\n\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"480\" src=\"http:\/\/www.youtube.com\/embed\/iygDwwnA3iU\" width=\"640\"><\/iframe>\n\n\n","html":"<p style=\"text-align: center;\"><strong>UPDATE: This thing&#8217;s now on <a href=\"http:\/\/igg.me\/at\/metanact\">IndieGogo<\/a>! The below material is severely outdated :)<\/strong><\/p>\n<h3 style=\"text-align: center;\"><\/h3>\n<h3 style=\"text-align: center;\">Overview<\/h3>\n<p>Metanact is a fast-paced 2D spaceshooter whereby the game is played in the user&#8217;s filesystem &#8211; directories and files are each displayed as in-game objects. As this is an HSC project of mine, I&#8217;m unsure of the rules associated with distributing source-code, documentation etc; basically &#8211; I&#8217;ll keep much of it under wraps until the project is handed in &#8212; probably around October this year. Without doing too much harm, the game is written in C++, uses SFML for rendering and media and depends on Boost for a portable directory-traversal mechanism. We hand in updated project logs at regular intervals and have our assessment marked partially every term.<\/p>\n<h3 style=\"text-align: center;\">Demo<\/h3>\n<p><iframe src=\"http:\/\/www.youtube.com\/embed\/iygDwwnA3iU\" height=\"480\" width=\"640\" allowfullscreen=\"\" frameborder=\"0\"><\/iframe><\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 14 Jan 2013 15:07:16 +0000","created_by":1,"updated_at":"Tue, 16 Jul 2013 16:17:52 +0000","updated_by":1,"published_at":"Mon, 14 Jan 2013 15:07:16 +0000","published_by":1},{"id":373,"title":"Flash chips","slug":"temp-slug-12","markdown":"\nhttp:\/\/au.element14.com\/micron\/n25q032a13ese40g\/flash-serial-32mb-3v-8wsoic\/dp\/2253675\n\nhttp:\/\/au.element14.com\/micron\/n25q032a13esc40g\/flash-serial-32mb-3v-8nsoic\/dp\/2253674\n\nhttp:\/\/au.element14.com\/microchip\/sst25vf032b-80-4i-s2af\/memory-flash-32mbit-spi-8soic\/dp\/1829955\n\n\n","html":"<p>http:\/\/au.element14.com\/micron\/n25q032a13ese40g\/flash-serial-32mb-3v-8wsoic\/dp\/2253675<\/p>\n<p>http:\/\/au.element14.com\/micron\/n25q032a13esc40g\/flash-serial-32mb-3v-8nsoic\/dp\/2253674<\/p>\n<p>http:\/\/au.element14.com\/microchip\/sst25vf032b-80-4i-s2af\/memory-flash-32mbit-spi-8soic\/dp\/1829955<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 18 Jan 2013 09:45:34 +0000","created_by":1,"updated_at":"Fri, 18 Jan 2013 09:45:34 +0000","updated_by":1,"published_at":"","published_by":1},{"id":374,"title":"The UberDrive","slug":"the-uberdrive","markdown":"\n<div class=\"wp-caption aligncenter\" id=\"attachment_200\" style=\"width: 810px\">[![](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2012\/12\/uberdrive.jpg)](http:\/\/sebholzapfel.com\/?attachment_id=200)picture\n\n<\/div>### Not so uber\n\nThe UberDrive (as I like to call it) is completely cross-OS USB-compliant storage device \u2013 and can store a whopping 7 kilobytes of data. Admittedly this was never really a \u2018project\u2019; more so a result of a couple of hours\u2019 fiddling around. Basically, I worked off of the back of one of microchip\u2019s CDC storage class demos, flipped the config switches so that it would run on my model PIC (24FJ64GB002)instead of what it was designed for and modified the device name. Then I dissected an old USB cable, breaking it out into headers so that it could be used on the breadboard. After that I just used my [rather nice LCD library](http:\/\/sebholzapfel.com\/?p=88 \"4-bit Pic24 Alphanumeric LCD library\") (shameless self-advertisement right there) to add a little LCD display to it. Finito.\n\nWhat I think is interesting about this though is the potential for something completely tiny and custom that stores files. Along the lines of [this](http:\/\/zpriddy.com\/wp-content\/uploads\/2012\/07\/531169_4197223730556_1510052436_n.jpeg), maybe :D.\n\n\n","html":"<div id=\"attachment_200\" class=\"wp-caption aligncenter\" style=\"width: 810px\"><a href=\"http:\/\/sebholzapfel.com\/?attachment_id=200\" rel=\"attachment wp-att-200\"><img class=\"size-full wp-image-200\" alt=\"\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2012\/12\/uberdrive.jpg\" width=\"800\" height=\"500\" \/><\/a><p class=\"wp-caption-text\">picture<\/p><\/div>\n<h3 style=\"text-align: center;\">Not so uber<\/h3>\n<p>The UberDrive (as I like to call it) is completely cross-OS USB-compliant storage device &#8211; and can store a whopping 7 kilobytes of data. Admittedly this was never really a &#8216;project&#8217;; more so a result of a couple of hours&#8217; fiddling around. Basically, I worked off of the back of one of microchip&#8217;s CDC storage class demos, flipped the config switches so that it would run on my model PIC (24FJ64GB002)instead of what it was designed for and modified the device name. Then I dissected an old USB cable, breaking it out into headers so that it could be used on the breadboard. After that I just used my <a title=\"4-bit Pic24 Alphanumeric LCD library\" href=\"http:\/\/sebholzapfel.com\/?p=88\">rather nice LCD library<\/a> (shameless self-advertisement right there) to add a little LCD display to it. Finito.<\/p>\n<p>What I think is interesting about this though is the potential for something completely tiny and custom that stores files. Along the lines of <a href=\"http:\/\/zpriddy.com\/wp-content\/uploads\/2012\/07\/531169_4197223730556_1510052436_n.jpeg\">this<\/a>, maybe :D.<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 21 Jan 2013 12:33:26 +0000","created_by":1,"updated_at":"Fri, 25 Jan 2013 08:58:34 +0000","updated_by":1,"published_at":"Mon, 21 Jan 2013 12:33:26 +0000","published_by":1},{"id":381,"title":"DataFiend","slug":"temp-slug-14","markdown":"\nSo I\u2019ve been working on IT\/Electronics in the Ag sector for a while now; and I can\u2019t help but cringe at the prices institutions pay for their dataloggers. I\u2019m talking in the region of $800 each unit for 16K of memory, a micro, and the ability to read 4 sensors. Or at least I\u2019m pretty sure the things are that simple; I took one apart the other day (I won\u2019t name it in fear of being sued or something, heh) and other then an op-amp, micro, flash, battery, reg and some passives; there\u2019s not much to them. Some have a little short-range wireless modules as well (I\u2019m talking ~10cm) as a substitute for wired reading, but I looked up the chip model and it\u2019s worth a few cents.\n\n### The datafiend\n\nI\u2019ve only really just started working on this; but it\u2019s meant to be basically a drop-in replacement for these loggers at a much more reasonable price-point. I\u2019ve got a case figured and a PCB layed out to suit (Pictures as soon as it\u2019s assembled!). The bill of materials, excluding assembly; of the PCB, components, battery and case is just under $10 per unit it quantities over ~50. Assuming assembly is another 30%, $13 is a lot cheaper than $800! Of course that\u2019s not a selling price \u2013 labour, research, advertising and distribution on a product such as this could easily buff it\u2019s price to $70 or so; but I\u2019m still impressed at the difference! Here are some of the new features that this logger has:\n\n- It\u2019s tiny; uses mostly SMD components. About 5x3x1.5cm.\n- It can read from 8 different analogue inputs, compared with an onboard precision voltage reference\n- It\u2019s got 2 megabytes of storage (A heck of a lot for simple datalogging, much more so than 16K!)\n- It\u2019s got an onboard temperature sensor\n- It can sense it\u2019s own battery voltage\n- It\u2019s got mosfets on all ICs that drain considerable current, and can hence switch parts of itself off when it\u2019s not measuring.\n- It runs off a coin cell \u2013 CR2032; Early estimations put hourly readings at just over a year\u2019s battery life.\n- It\u2019s got a nice single; high-current MOSFET for a situation where; for example, you want to trigger a light and take a reading at the same time, then turn the light off.\n- It\u2019s got 2 serial transceivers broken out for custom sensors\n- It\u2019s got space for a pin-out-matching 433mhz wireless module for another $5\n\n\n","html":"<p>So I&#8217;ve been working on IT\/Electronics in the Ag sector for a while now; and I can&#8217;t help but cringe at the prices institutions pay for their dataloggers. I&#8217;m talking in the region of $800 each unit for 16K of memory, a micro, and the ability to read 4 sensors. Or at least I&#8217;m pretty sure the things are that simple; I took one apart the other day (I won&#8217;t name it in fear of being sued or something, heh) and other then an op-amp, micro, flash, battery, reg and some passives; there&#8217;s not much to them. Some have a little short-range wireless modules as well (I&#8217;m talking ~10cm) as a substitute for wired reading, but I looked up the chip model and it&#8217;s worth a few cents.<\/p>\n<h3 style=\"text-align: center;\">The datafiend<\/h3>\n<p>I&#8217;ve only really just started working on this; but it&#8217;s meant to be basically a drop-in replacement for these loggers at a much more reasonable price-point. I&#8217;ve got a case figured and a PCB layed out to suit (Pictures as soon as it&#8217;s assembled!). The bill of materials, excluding assembly; of the PCB, components, battery and case is just under $10 per unit it quantities over ~50. Assuming assembly is another 30%, $13 is a lot cheaper than $800! Of course that&#8217;s not a selling price &#8211; labour, research, advertising and distribution on a product such as this could easily buff it&#8217;s price to $70 or so; but I&#8217;m still impressed at the difference! Here are some of the new features that this logger has:<\/p>\n<ul>\n<li>It&#8217;s tiny; uses mostly SMD components. About 5x3x1.5cm.<\/li>\n<li>It can read from 8 different analogue inputs, compared with an onboard precision voltage reference<\/li>\n<li>It&#8217;s got 2 megabytes of storage (A heck of a lot for simple datalogging, much more so than 16K!)<\/li>\n<li>It&#8217;s got an onboard temperature sensor<\/li>\n<li>It can sense it&#8217;s own battery voltage<\/li>\n<li>It&#8217;s got mosfets on all ICs that drain considerable current, and can hence switch parts of itself off when it&#8217;s not measuring.<\/li>\n<li>It runs off a coin cell &#8211; CR2032; Early estimations put hourly readings at just over a year&#8217;s battery life.<\/li>\n<li>It&#8217;s got a nice single; high-current MOSFET for a situation where; for example, you want to trigger a light and take a reading at the same time, then turn the light off.<\/li>\n<li>It&#8217;s got 2 serial transceivers broken out for custom sensors<\/li>\n<li>It&#8217;s got space for a pin-out-matching 433mhz wireless module for another $5<\/li>\n<\/ul>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 25 Jan 2013 09:09:44 +0000","created_by":1,"updated_at":"Fri, 25 Jan 2013 09:09:44 +0000","updated_by":1,"published_at":"","published_by":1},{"id":394,"title":"A terminal-based 3D model viewer","slug":"a-terminal-based-3d-model-viewer","markdown":"\nA natural extension on some of the [javascript stuff](http:\/\/sebholzapfel.com\/?p=245 \"Playing with Javascript\") I\u2019ve worked on (Details on some of the 3D math is found there), I spent a short while piecing together a library and demo code that can render any standard .obj 3D model as ascii text; using mostly C++ and a little python.\n\nI\u2019m not sure exactly what a practical use of this would be, but I was thinking maybe along the lines of fancy console loading screens, viewing models on remote servers; etc.\n\nThis is a pretty visual project so I put together a little video demo:\n\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http:\/\/www.youtube.com\/embed\/QZuLZ4T2xBM\" width=\"420\"><\/iframe>\n\nAnnoyingly the last quarter of the video was cut off but it was only a little tour of the docs and a goodbye so there isn\u2019t much that was missed out on.\n\nYou can download the project files [here](https:\/\/www.dropbox.com\/s\/g1auhootxp3u872\/t3dl.zip), and if anyone feels the need to use this in their own projects, as far as I\u2019m concerned everything is free for commercial use.\n\n\n","html":"<p>A natural extension on some of the <a title=\"Playing with Javascript\" href=\"http:\/\/sebholzapfel.com\/?p=245\">javascript stuff<\/a> I&#8217;ve worked on (Details on some of the 3D math is found there), I spent a short while piecing together a library and demo code that can render any standard .obj 3D model as ascii text; using mostly C++ and a little python.<\/p>\n<p>I&#8217;m not sure exactly what a practical use of this would be, but I was thinking maybe along the lines of fancy console loading screens, viewing models on remote servers; etc.<\/p>\n<p>This is a pretty visual project so I put together a little video demo:<\/p>\n<p><iframe src=\"http:\/\/www.youtube.com\/embed\/QZuLZ4T2xBM\" height=\"315\" width=\"420\" allowfullscreen=\"\" frameborder=\"0\"><\/iframe><\/p>\n<p>Annoyingly the last quarter of the video was cut off but it was only a little tour of the docs and a goodbye so there isn&#8217;t much that was missed out on.<\/p>\n<p>You can download the project files <a href=\"https:\/\/www.dropbox.com\/s\/g1auhootxp3u872\/t3dl.zip\">here<\/a>, and if anyone feels the need to use this in their own projects, as far as I&#8217;m concerned everything is free for commercial use.<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 25 Jan 2013 16:55:50 +0000","created_by":1,"updated_at":"Fri, 25 Jan 2013 17:10:23 +0000","updated_by":1,"published_at":"Fri, 25 Jan 2013 16:55:50 +0000","published_by":1},{"id":264,"title":"http:\/\/www.patriciogonzalezvivo.com\/blog\/?p=657","slug":"temp-slug-16","markdown":"","html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 21 Mar 2013 13:24:45 +0000","created_by":1,"updated_at":"Thu, 21 Mar 2013 13:24:45 +0000","updated_by":1,"published_at":"","published_by":1},{"id":400,"title":"Uber Hexagon - An HTML5, Super Hexagon inspired seziure inducer.","slug":"uber-hexagon-an-html5-super-hexagon-inspired-timewasting-tool","markdown":"\nHad a little extra time in-between half-yearly exams \u2014 so I had a crack at doing some canvas stuff in Javascript:\n\n[![suphexpic](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2013\/03\/suphexpic.png)](http:\/\/sebholzapfel.com\/hx.htm)\n\nCode\u2019s probably not perfect (web development has never really been my forte) \u2013 but I\u2019m yet to find any serious bugs so no matter, it works :D \u2014 Only about 250 lines, too. Tested in Firefox and Chrome, supports iOS and android browsers too with touch. Not sure if it works in IE, heh.\n\nMechanics are similar to Super Hexagon\u2019s, except the difficulty ramps indefinitely and there aren\u2019t any patterns \u2013 the field is completely random. If anyone\u2019s able to get over 120 seconds, I\u2019m proud \u2014 that\u2019s just over as far as I can pull through :P\n\nTo get to it, click on the picture above or follow the shortlink: [sebholzapfel.com\/hx.htm](http:\/\/sebholzapfel.com\/hx.htm). Have fun!\n\n*Oh, and I hope I\u2019m not breaking any copyright laws \u2014 drop me an email if I am.*\n\n\n","html":"<p>Had a little extra time in-between half-yearly exams &#8212; so I had a crack at doing some canvas stuff in Javascript:<\/p>\n<p style=\"text-align: center;\"><a href=\"http:\/\/sebholzapfel.com\/hx.htm\"><img class=\"aligncenter size-full wp-image-401\" alt=\"suphexpic\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2013\/03\/suphexpic.png\" width=\"913\" height=\"669\" \/><\/a><\/p>\n<p>Code&#8217;s probably not perfect (web development has never really been my forte) &#8211; but I&#8217;m yet to find any serious bugs so no matter, it works :D &#8212; Only about 250 lines, too. Tested in Firefox and Chrome, supports iOS and android browsers too with touch. Not sure if it works in IE, heh.<\/p>\n<p>Mechanics are similar to Super Hexagon&#8217;s, except the difficulty ramps indefinitely and there aren&#8217;t any patterns &#8211; the field is completely random. If anyone&#8217;s able to get over 120 seconds, I&#8217;m proud &#8212; that&#8217;s just over as far as I can pull through :P<\/p>\n<p>To get to it, click on the picture above or follow the shortlink: <a href=\"http:\/\/sebholzapfel.com\/hx.htm\">sebholzapfel.com\/hx.htm<\/a>. Have fun!<\/p>\n<p><em>Oh, and I hope I&#8217;m not breaking any copyright laws &#8212; drop me an email if I am.<\/em><\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 27 Mar 2013 08:09:13 +0000","created_by":1,"updated_at":"Sat, 26 Jul 2014 09:57:28 +0000","updated_by":1,"published_at":"Wed, 27 Mar 2013 08:09:13 +0000","published_by":1},{"id":383,"title":"CNC stuff","slug":"temp-slug-18","markdown":"\n[http:\/\/www.zentoolworks.com\/product_info.php?cPath=14&products_id=74](http:\/\/www.zentoolworks.com\/product_info.php?cPath=14&products_id=74)\n\n[http:\/\/www.ebay.com.au\/itm\/3-Axis-TB6560-CNC-Stepper-Motor-Driver-Controller-Board-MACH3-AU-Local-Shipping-\/190751335382?pt=LH_DefaultDomain_15&hash=item2c69aa63d6](http:\/\/www.ebay.com.au\/itm\/3-Axis-TB6560-CNC-Stepper-Motor-Driver-Controller-Board-MACH3-AU-Local-Shipping-\/190751335382?pt=LH_DefaultDomain_15&hash=item2c69aa63d6)\n\n\n","html":"<p><a href=\"http:\/\/www.zentoolworks.com\/product_info.php?cPath=14&amp;products_id=74\">http:\/\/www.zentoolworks.com\/product_info.php?cPath=14&amp;products_id=74<\/a><\/p>\n<p><a href=\"http:\/\/www.ebay.com.au\/itm\/3-Axis-TB6560-CNC-Stepper-Motor-Driver-Controller-Board-MACH3-AU-Local-Shipping-\/190751335382?pt=LH_DefaultDomain_15&amp;hash=item2c69aa63d6\">http:\/\/www.ebay.com.au\/itm\/3-Axis-TB6560-CNC-Stepper-Motor-Driver-Controller-Board-MACH3-AU-Local-Shipping-\/190751335382?pt=LH_DefaultDomain_15&amp;hash=item2c69aa63d6<\/a><\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 19 Apr 2013 10:07:48 +0000","created_by":1,"updated_at":"Fri, 19 Apr 2013 10:07:48 +0000","updated_by":1,"published_at":"","published_by":1},{"id":399,"title":"Fluid stuff","slug":"temp-slug-19","markdown":"\nhttp:\/\/xissburg.com\/faster-gaussian-blur-in-glsl\/\n\nhttp:\/\/www.gamedev.net\/topic\/617217-fast-2d-metaball-effect-like-in-fluid-simulations\/http:\/\/en.sfml-dev.org\/forums\/index.php?topic=6374.0\n\n\n","html":"<p>http:\/\/xissburg.com\/faster-gaussian-blur-in-glsl\/<\/p>\n<p>http:\/\/www.gamedev.net\/topic\/617217-fast-2d-metaball-effect-like-in-fluid-simulations\/http:\/\/en.sfml-dev.org\/forums\/index.php?topic=6374.0<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 01 Aug 2013 13:15:14 +0000","created_by":1,"updated_at":"Thu, 01 Aug 2013 13:15:14 +0000","updated_by":1,"published_at":"","published_by":1},{"id":430,"title":"Resum\u00e9\/CV","slug":"resume","markdown":"\nGet it [here.](https:\/\/www.dropbox.com\/s\/mndyj648n6nttna\/ResumeV4.pdf?dl=0)\n\nInterested in hiring me? Check out the contact page & drop me an email.\n\n\n","html":"<p>Get it <a href=\"https:\/\/www.dropbox.com\/s\/mndyj648n6nttna\/ResumeV4.pdf?dl=0\">here.<\/a><\/p>\n<p>Interested in hiring me? Check out the contact page &amp; drop me an email.<\/p>\n","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 07 Jun 2014 14:11:57 +0000","created_by":1,"updated_at":"Thu, 26 Feb 2015 14:39:41 +0000","updated_by":1,"published_at":"Sat, 07 Jun 2014 14:11:57 +0000","published_by":1},{"id":443,"title":"BBB Scopeclock conversion - Part 1","slug":"bbb-scopeclock-conversion-part-1","markdown":"\n![cropped1](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/cropped11.jpg)\n\nA few weeks ago, I came across an article on [Hackaday ](http:\/\/hackaday.com)about [memory mapped IO](http:\/\/hackaday.com\/2013\/12\/07\/speeding-up-beaglebone-black-gpio-a-thousand-times\/), and the sorts of toggle speeds you can achieve on the Beaglebone\u2019s output pins when using this technique as opposed to just using the file access API. Around the same time, I was reading some articles on [Pulse Density Modulation](http:\/\/en.wikipedia.org\/wiki\/Pulse-density_modulation) (as opposed to Pulse *Width* Modulation) for another project I was working on; in an attempt to increase the slew rate of a low-pass filter on the output of a microcontroller I was using.\n\nAs it happened, I\u2019d had this old Dick Smith scope laying around ever since I bought a DSO to replace it:- (Dick Smith have since stopped selling hobbyist electronics products, heh). And so I wondered if it would be possible, using a Beaglebone Black; to turn this old thing into some sort of clock with the X-Y mode as a vector display; using nothing but 2 toggling GPIO pins and a few passive components.\n\n### The Setup\n\n![cropped2](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/cropped2.jpg)\n\nAs you can see, there really isn\u2019t much to it component-wise! The devil was much more so in the software for this project. I used a couple of bits of veroboard; some 1K resistors and 100nF caps. Input from the sixth GPIOs down from the right and left side of the right header, output straight to the X and Y inputs of the scope. Using:\n\n![0513embwadaeq02](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/0513embwadaeq02.png)\n\nWe can see our filter frequency will end up around (2*pi)\/(0.1\u00ce\u00bcF*500\u00ce\u00a9)= 126KHz; so as long as we\u2019re toggling at a rate considerably above that frequency; the output should be a relatively nice representation of the analog information we\u2019re trying to create artificially. (A much more detailed workthrough of calculations can be found [here](http:\/\/www.embedded.com\/electronics-blogs\/embedded-round-table\/4414405\/2\/Pulse-density-modulation))\n\n### The Software\n\nNow for the difficult part: actually getting those pins to generate some meaningful signals. There were a few features I wanted from the get-go:\n\n- Have some sort of **interesting 3D animation** while the time is displaying\n- Be able to do everything **fast enough** so that I don\u2019t need to blank the scope, as it doesn\u2019t have a blanking input!\n- Use **Roman Numerals** to represent the time (Eh, personal preference)\n\nThe first step was basic \u2013 getting the pulse-density-modulation down. I ended up smashing a couple of libraries together, namely [BBBioLib](https:\/\/github.com\/VegetableAvenger\/BBBIOlib) (for fast, memory-mapped IO) and some PDM code derived from [here.](http:\/\/www.embedded.com\/electronics-blogs\/embedded-round-table\/4414405\/Pulse-density-modulation) To test the system out, I just set up a loop from zero to max PDM value; in an attempt to generate a sawtooth:\n\n![NewFile0](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/NewFile0.bmp)\n\nI\u2019m pretty sure the artefact on the right is just the OS deciding to do something else; but for the most part; this waveform looked pretty good! Just had to bring the filter frequency up a bit to avoid some excess smoothing at the low-end. (Note: at this time I was using a decade resistance box; 500 ohm was the final value I decided on)\n\nI then went ahead and modified a previous [software project of mine](http:\/\/sebholzapfel.com\/?p=394 \"A terminal-based 3D model viewer\"), (basically the skeleton of a 3D renderer from scratch); to instead pipe the output points straight out the GPIOs. Initially, my approach had simply been to take the ends of lines and draw them across the screen of the scope. However, this didn\u2019t really work as the scope spent just as much time seeking the start\/end positions of lines as it did actually drawing them \u2013 the screen was just a mess of lines! My solution? Basically, instead of:\n\nvoid Plot::DrawLine( Vec2 p1, Vec2 p2 ) { SetCoord(p1); SetCoord(p2); }\n\nJust draw back and forth a few times on the lines:\n\nvoid Plot::DrawLine( Vec2 p1, Vec2 p2 ) { for(int i = 0; i != 4; ++i ){ SetCoord(p1); SetCoord(p2); } }\n\nWhich gives us:\n\n![NewFile1](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/NewFile1.bmp)\n\n(As you can see from the diagram the sections of waveform that are the same amplitude are line segments) \u2013 Meaning that the scope spends much more time on the actual lines, and much less time seeking them. Here\u2019s what the output looks like in X-Y mode:\n\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"\/\/www.youtube.com\/embed\/8pz1K0eeis0\" width=\"560\"><\/iframe>\n\nNow all that had to be done was the time displaying. For the roman numerals, things weren\u2019t too complicated; I just filled some arrays full of coordinates for lines in the characters:\n\nstd::vector< t3::Vec2 > lines_x; lines_x.push_back( t3::Vec2(0, 0) ); lines_x.push_back( t3::Vec2(5, 8) ); lines_x.push_back( t3::Vec2(5, 0) ); lines_x.push_back( t3::Vec2(0, 8) ); std::vector< t3::Vec2 > lines_i; lines_i.push_back( t3::Vec2(2.5, 0) ); lines_i.push_back( t3::Vec2(2.5, 8) ); ...\n\nAnd then draw them at offsets determined by their position in a converted roman string taken from integer portions of the current time:\n\nvoid DrawLines( std::vector< t3::Vec2 > &lines, t3::Plot &plot, t3::Vec2 offset ) { for( int i = 0; i != lines.size()\/2; ++i ) { plot.DrawLine( lines[i*2]+offset, lines[i*2+1]+offset, ' ' ); } } ... \/\/(Part of DrawRomanNumberAtOffset) std::string roman1 = int_to_roman(num); for( int i = 0; i != roman1.size(); ++i ) { t3::Vec2 offset(20+7*i-roman1.size()*3, offset_y); if( roman1[i] == 'X' ) DrawLines( lines_x, p, offset ); else if ( roman1[i] == 'I' ) DrawLines( lines_i, p, offset ); else if ( roman1[i] == 'V' ) DrawLines( lines_v, p, offset ); else if ( roman1[i] == 'L' ) DrawLines( lines_l, p, offset ); } ... i.e: DrawRomanNumberAtOffset( timeinfo->tm_min, 0, p);\n\nHere\u2019s a video of the roman numbers being displayed on top of the 3D rendering (Time delta sped up in software):\n\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"\/\/www.youtube.com\/embed\/J6K5h2EOXY0\" width=\"560\"><\/iframe>\n\nI actually came across a pretty strange problem with the Beaglebone\u2019s built in timekeeping when writing the software; whenever I ran my application the time would just stop incrementing! I\u2019m talking:  \n![timesnip](http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/timesnip.png)  \n Now you can see that the system time has incremented 6 seconds, but I in fact had my application open for at least a minute! I\u2019m still not quite sure what was going on there; but in software this meant that the clock would always be stuck on whatever the time was when the program was first executed. My fix was to fetch the unix epoch time, and increment it based on the CPU realtime clock before fetching the raw time every refresh. This meant the system time was still out of wack; but at least the clock functioned correctly.\n\nThat\u2019s it for now! You can fetch the code [here](https:\/\/www.dropbox.com\/s\/2e7wdl0baiy456i\/BBBScopeClock.zip) (2 binaries are included if you want to run it straight away; to compile it you\u2019ll need to set up & install BBBiolib then run the build script). A lot of it is self-confessed hackjob; but I was strapped for time on this project :P\n\nIn my next post; I\u2019ll probably be shoving the beaglebone in the scope and connecting it permanently.\n\n\n","html":"<p><img class=\"aligncenter size-full wp-image-466\" alt=\"cropped1\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/cropped11.jpg\" width=\"800\" height=\"197\" \/><\/p>\n<p>A few weeks ago, I came across an article on <a href=\"http:\/\/hackaday.com\">Hackaday <\/a>about <a href=\"http:\/\/hackaday.com\/2013\/12\/07\/speeding-up-beaglebone-black-gpio-a-thousand-times\/\">memory mapped IO<\/a>, and the sorts of toggle speeds you can achieve on the Beaglebone&#8217;s output pins when using this technique as opposed to just using the file access API. Around the same time, I was reading some articles on <a href=\"http:\/\/en.wikipedia.org\/wiki\/Pulse-density_modulation\">Pulse Density Modulation<\/a> (as opposed to Pulse <em>Width<\/em> Modulation) for another project I was working on; in an attempt to increase the slew rate of a low-pass filter on the output of a microcontroller I was using.<\/p>\n<p>As it happened, I&#8217;d had this old Dick Smith scope laying around ever since I bought a DSO to replace it:- (Dick Smith have since stopped selling hobbyist electronics products, heh). And so I wondered if it would be possible, using a Beaglebone Black; to turn this old thing into some sort of clock with the X-Y mode as a vector display; using nothing but 2 toggling GPIO pins and a few passive components.<\/p>\n<h3 style=\"text-align: center;\">The Setup<\/h3>\n<p style=\"text-align: center;\"><img class=\"aligncenter size-full wp-image-467\" style=\"width: 400; height: 300;\" alt=\"cropped2\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/cropped2.jpg\" width=\"400\" height=\"300\" \/><\/p>\n<p>As you can see, there really isn&#8217;t much to it component-wise! The devil was much more so in the software for this project. I used a couple of bits of veroboard; some 1K resistors and 100nF caps. Input from the sixth GPIOs down from the right and left side of the right header, output straight to the X and Y inputs of the scope. Using:<\/p>\n<p style=\"text-align: center;\"><img class=\"aligncenter wp-image-456\" style=\"width: 127; height: 84;\" alt=\"0513embwadaeq02\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/0513embwadaeq02.png\" width=\"127\" height=\"84\" \/><\/p>\n<p>We can see our filter frequency will end up around (2*pi)\/(0.1\u03bcF*500\u03a9)= 126KHz; so as long as we&#8217;re toggling at a rate considerably above that frequency; the output should be a relatively nice representation of the analog information we&#8217;re trying to create artificially. (A much more detailed workthrough of calculations can be found <a href=\"http:\/\/www.embedded.com\/electronics-blogs\/embedded-round-table\/4414405\/2\/Pulse-density-modulation\">here<\/a>)<\/p>\n<h3 style=\"text-align: center;\">The Software<\/h3>\n<p>Now for the difficult part: actually getting those pins to generate some meaningful signals. There were a few features I wanted from the get-go:<\/p>\n<ul>\n<li style=\"text-align: left;\">Have some sort of <strong>interesting 3D animation<\/strong> while the time is displaying<\/li>\n<li style=\"text-align: left;\">Be able to do everything <strong>fast enough<\/strong> so that I don&#8217;t need to blank the scope, as it doesn&#8217;t have a blanking input!<\/li>\n<li style=\"text-align: left;\">Use <strong>Roman Numerals<\/strong> to represent the time (Eh, personal preference)<\/li>\n<\/ul>\n<p>The first step was basic &#8211; getting the pulse-density-modulation down. I ended up smashing a couple of libraries together, namely <a href=\"https:\/\/github.com\/VegetableAvenger\/BBBIOlib\">BBBioLib<\/a> (for fast, memory-mapped IO) and some PDM code derived from <a href=\"http:\/\/www.embedded.com\/electronics-blogs\/embedded-round-table\/4414405\/Pulse-density-modulation\">here.<\/a> To test the system out, I just set up a loop from zero to max PDM value; in an attempt to generate a sawtooth:<\/p>\n<p><img class=\"aligncenter size-full wp-image-472\" style=\"width: 320px; height: 234px;\" alt=\"NewFile0\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/NewFile0.bmp\" \/><\/p>\n<p>I&#8217;m pretty sure the artefact on the right is just the OS deciding to do something else; but for the most part; this waveform looked pretty good! Just had to bring the filter frequency up a bit to avoid some excess smoothing at the low-end. (Note: at this time I was using a decade resistance box; 500 ohm was the final value I decided on)<\/p>\n<p>I then went ahead and modified a previous <a title=\"A terminal-based 3D model viewer\" href=\"http:\/\/sebholzapfel.com\/?p=394\">software project of mine<\/a>, (basically the skeleton of a 3D renderer from scratch); to instead pipe the output points straight out the GPIOs. Initially, my approach had simply been to take the ends of lines and draw them across the screen of the scope. However, this didn&#8217;t really work as the scope spent just as much time seeking the start\/end positions of lines as it did actually drawing them &#8211; the screen was just a mess of lines! My solution? Basically, instead of:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">void Plot::DrawLine( Vec2 p1, Vec2 p2 ) {\r\n    SetCoord(p1);\r\n    SetCoord(p2);\r\n}<\/pre>\n<p>Just draw back and forth a few times on the lines:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">void Plot::DrawLine( Vec2 p1, Vec2 p2 ) {\r\n    for(int i = 0; i != 4; ++i ){\r\n        SetCoord(p1);\r\n        SetCoord(p2);\r\n    }\r\n}<\/pre>\n<p>Which gives us:<\/p>\n<p><img class=\"aligncenter size-full wp-image-475\" style=\"width: 320px; height: 234px;\" alt=\"NewFile1\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/NewFile1.bmp\" \/><\/p>\n<p>(As you can see from the diagram the sections of waveform that are the same amplitude are line segments) &#8211; Meaning that the scope spends much more time on the actual lines, and much less time seeking them. Here&#8217;s what the output looks like in X-Y mode:<\/p>\n<p><iframe src=\"\/\/www.youtube.com\/embed\/8pz1K0eeis0\" height=\"315\" width=\"560\" allowfullscreen=\"\" frameborder=\"0\"><\/iframe><\/p>\n<p>Now all that had to be done was the time displaying. For the roman numerals, things weren&#8217;t too complicated; I just filled some arrays full of coordinates for lines in the characters:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">std::vector&lt; t3::Vec2 &gt; lines_x;\r\nlines_x.push_back( t3::Vec2(0, 0) );\r\nlines_x.push_back( t3::Vec2(5, 8) );\r\nlines_x.push_back( t3::Vec2(5, 0) );\r\nlines_x.push_back( t3::Vec2(0, 8) );\r\n\r\nstd::vector&lt; t3::Vec2 &gt; lines_i;\r\nlines_i.push_back( t3::Vec2(2.5, 0) );\r\nlines_i.push_back( t3::Vec2(2.5, 8) );\r\n...<\/pre>\n<p>And then draw them at offsets determined by their position in a converted roman string taken from integer portions of the current time:<\/p>\n<pre class=\"brush: cpp; title: ; notranslate\" title=\"\">void DrawLines( std::vector&lt; t3::Vec2 &gt; &amp;lines, t3::Plot &amp;plot, t3::Vec2 offset ) {\r\n\tfor( int i = 0; i != lines.size()\/2; ++i ) {\r\n\t\tplot.DrawLine( lines[i*2]+offset, lines[i*2+1]+offset, ' ' );\r\n\t}\r\n}\r\n\r\n...\r\n\r\n\/\/(Part of DrawRomanNumberAtOffset)\r\n        std::string roman1 = int_to_roman(num);\r\n\tfor( int i = 0; i != roman1.size(); ++i ) {\r\n\t\tt3::Vec2 offset(20+7*i-roman1.size()*3, offset_y);\r\n\r\n\t\tif( roman1[i] == 'X' )\r\n\t\t\tDrawLines( lines_x, p, offset );\r\n\t\telse if ( roman1[i] == 'I' )\r\n\t\t\tDrawLines( lines_i, p, offset );\r\n\t\telse if ( roman1[i] == 'V' )\r\n\t\t\tDrawLines( lines_v, p, offset );\r\n\t\telse if ( roman1[i] == 'L' )\r\n\t\t\tDrawLines( lines_l, p, offset );\r\n\t}\r\n\r\n... i.e:\r\nDrawRomanNumberAtOffset( timeinfo-&gt;tm_min, 0, p);<\/pre>\n<p>Here&#8217;s a video of the roman numbers being displayed on top of the 3D rendering (Time delta sped up in software):<\/p>\n<p><iframe src=\"\/\/www.youtube.com\/embed\/J6K5h2EOXY0\" height=\"315\" width=\"560\" allowfullscreen=\"\" frameborder=\"0\"><\/iframe><\/p>\n<p>I actually came across a pretty strange problem with the Beaglebone&#8217;s built in timekeeping when writing the software; whenever I ran my application the time would just stop incrementing! I&#8217;m talking:<br \/>\n<img class=\"aligncenter size-full wp-image-487\" style=\"width: 351px; height: 158px;\" alt=\"timesnip\" src=\"http:\/\/sebholzapfel.com\/wp-content\/uploads\/2014\/08\/timesnip.png\" width=\"351\" height=\"158\" \/><br \/>\nNow you can see that the system time has incremented 6 seconds, but I in fact had my application open for at least a minute! I&#8217;m still not quite sure what was going on there; but in software this meant that the clock would always be stuck on whatever the time was when the program was first executed. My fix was to fetch the unix epoch time, and increment it based on the CPU realtime clock before fetching the raw time every refresh. This meant the system time was still out of wack; but at least the clock functioned correctly.<\/p>\n<p>That&#8217;s it for now! You can fetch the code <a href=\"https:\/\/www.dropbox.com\/s\/2e7wdl0baiy456i\/BBBScopeClock.zip\">here<\/a> (2 binaries are included if you want to run it straight away; to compile it you&#8217;ll need to set up &amp; install BBBiolib then run the build script). A lot of it is self-confessed hackjob; but I was strapped for time on this project :P<\/p>\n<p>In my next post; I&#8217;ll probably be shoving the beaglebone in the scope and connecting it permanently.<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 10 Aug 2014 11:32:38 +0000","created_by":1,"updated_at":"Sun, 10 Aug 2014 11:48:01 +0000","updated_by":1,"published_at":"Sun, 10 Aug 2014 11:32:38 +0000","published_by":1},{"id":500,"title":"(no title)","slug":"temp-slug-22","markdown":"\nimport Graphics.UI.GLUT import Data.IORef import Control.Monad speedOfLight = 2.99792458e8 boundaryRefractiveIndex = 1.0 maximumRefractiveIndex = 1.0 maximumFrequency = 10.0e6 --50 MHz nyquistSamples = 60.0 numCells = 400 -- About 0.5 metres; calculate by dividing required d by grid fdtdECoefficient :: Double -> Double fdtdECoefficient relativePermittivity = speedOfLight*timeDelta\/relativePermittivity fdtdHCoefficient :: Double -> Double fdtdHCoefficient relativePermeability = speedOfLight*timeDelta\/relativePermeability smallestWavelength :: Double smallestWavelength = speedOfLight\/(maximumFrequency*maximumRefractiveIndex) gridDelta :: Double gridDelta = smallestWavelength \/ nyquistSamples --Good numbers for samples > 10 -- Note there are calculations to determine critical dimensions, in which case gridDelta must be post-adjusted. timeDelta :: Double timeDelta = boundaryRefractiveIndex*gridDelta\/(2*speedOfLight) --separate into update HfromE -> Boundary conditions -> updateEfromH functions! --Use array.Traverse? http:\/\/stackoverflow.com\/questions\/6242442\/haskell-repa-mapping-with-indices --http:\/\/emlab.utep.edu\/ee5390fdtd.htm lecture 6, page 11 updateLeftBorder :: [(Double, Double)] -> [(Double, Double)] updateLeftBorder (x:xs) = (eField x + head eCoefficients * hField x, hField x): xs updateRightBorder :: [(Double, Double)] -> [(Double, Double)] updateRightBorder xs = init xs ++ [(eField final, hField final - head hCoefficients * eField final)] where final = last xs updateH :: [(Double, Double)] -> [(Double, Double)] updateH xs = map (\\n -> (eField (xs!!n), hField (xs!!n) + (hCoefficients!!n)*( eField(xs!!(n+1)) - eField(xs!!n) ) ) ) [0..(numCells-2)] ++ [last xs] updateE :: [(Double, Double)] -> [(Double, Double)] updateE xs = [head xs] ++ map (\\n -> (eField (xs!!n) + (eCoefficients!!n)*(hField (xs!!n) - hField (xs!!(n-1))), hField (xs!!n) ) ) [1..(numCells-1)] update :: [(Double, Double)] -> [(Double, Double)] update input = (updateE.updateLeftBorder.updateRightBorder.updateH) input eCoefficients = (replicate 250 $ fdtdECoefficient 1.0) ++ (replicate 50 $ fdtdECoefficient 10.0) ++ (replicate 100 $ fdtdECoefficient 1.0) hCoefficients = replicate numCells $ fdtdHCoefficient 1.0 sampleGaussian x = 0.5*2**(-((fromIntegral x-80)**2)\/20) blankField = [(sampleGaussian x, -sampleGaussian x) | x <- [1..numCells]] eField = fst hField = snd getIteration n = last $ take n $ iterate update blankField printIteration n = sequence $ map (\\(x, y) -> putStrLn (show x ++ \",\" ++ show y)) (getIteration n) -- GRAPHICS CODE ePoints :: Int -> [(GLfloat,GLfloat,GLfloat)] ePoints n = [ ( fromIntegral k \/ (fromIntegral numCells \/2.0) - 1.0, realToFrac $ fst ((getIteration n)!!k), 0) | k <- [0..numCells-1] ] hPoints :: Int -> [(GLfloat,GLfloat,GLfloat)] hPoints n = [ ( fromIntegral k \/ (fromIntegral numCells \/2.0) - 1.0, realToFrac $ snd ((getIteration n)!!k), 0) | k <- [0..numCells-1] ] main :: IO () main = do (_progName, _args) <- getArgsAndInitialize _window <- createWindow \"FDTD Plot\" it <- newIORef 1.0 displayCallback $= display it idleCallback $= Just (idle it) mainLoop display :: IORef Double -> DisplayCallback display it = do itn <- get it let color3f r g b = color $ Color3 r g (b :: GLfloat) vertex3f x y z = vertex $ Vertex3 x y (z :: GLfloat) clear [ColorBuffer] renderPrimitive LineStrip $ do color3f 1.0 0.0 0.0 mapM_ (\\(x, y, z) -> vertex $ Vertex3 x y z) (ePoints $ round itn) renderPrimitive LineStrip $ do color3f 0.0 0.0 1.0 mapM_ (\\(x, y, z) -> vertex $ Vertex3 x y z) (hPoints $ round itn) renderPrimitive LineStrip $ do color3f 0.0 1.0 0.0 vertex3f 0.25 1.0 0.0 vertex3f 0.5 1.0 0.0 vertex3f 0.5 (-1.0) 0.0 vertex3f 0.25 (-1.0) 0.0 vertex3f 0.25 1.0 0.0 flush idle :: IORef Double -> IdleCallback idle it = do it $~! (+0.5) postRedisplay Nothing\n\n\n","html":"<pre class=\"brush: objc; title: ; notranslate\" title=\"\">import Graphics.UI.GLUT\r\nimport Data.IORef\r\nimport Control.Monad\r\n\r\nspeedOfLight = 2.99792458e8\r\nboundaryRefractiveIndex = 1.0\r\nmaximumRefractiveIndex = 1.0\r\nmaximumFrequency = 10.0e6 --50 MHz\r\nnyquistSamples = 60.0\r\nnumCells = 400 -- About 0.5 metres; calculate by dividing required d by grid\r\n\r\nfdtdECoefficient :: Double -&gt; Double\r\nfdtdECoefficient relativePermittivity = speedOfLight*timeDelta\/relativePermittivity\r\n\r\nfdtdHCoefficient :: Double -&gt; Double\r\nfdtdHCoefficient relativePermeability = speedOfLight*timeDelta\/relativePermeability\r\n\r\nsmallestWavelength :: Double\r\nsmallestWavelength = speedOfLight\/(maximumFrequency*maximumRefractiveIndex)\r\n\r\ngridDelta :: Double\r\ngridDelta = smallestWavelength \/ nyquistSamples --Good numbers for samples &gt; 10\r\n\r\n-- Note there are calculations to determine critical dimensions, in which case gridDelta must be post-adjusted.\r\n\r\ntimeDelta :: Double\r\ntimeDelta = boundaryRefractiveIndex*gridDelta\/(2*speedOfLight)\r\n\r\n--separate into update HfromE -&gt; Boundary conditions -&gt; updateEfromH functions!\r\n--Use array.Traverse? http:\/\/stackoverflow.com\/questions\/6242442\/haskell-repa-mapping-with-indices\r\n--http:\/\/emlab.utep.edu\/ee5390fdtd.htm lecture 6, page 11\r\n\r\nupdateLeftBorder :: [(Double, Double)] -&gt; [(Double, Double)]\r\nupdateLeftBorder (x:xs) = (eField x + head eCoefficients * hField x, hField x): xs\r\n\r\nupdateRightBorder :: [(Double, Double)] -&gt; [(Double, Double)]\r\nupdateRightBorder xs = init xs ++ [(eField final, hField final - head hCoefficients * eField final)]\r\n    where final = last xs\r\n\r\nupdateH :: [(Double, Double)] -&gt; [(Double, Double)]\r\nupdateH xs = map (\\n -&gt; (eField (xs!!n), hField (xs!!n) + (hCoefficients!!n)*( eField(xs!!(n+1)) - eField(xs!!n) ) ) ) [0..(numCells-2)] ++ [last xs]\r\n\r\nupdateE :: [(Double, Double)] -&gt; [(Double, Double)]\r\nupdateE xs = [head xs] ++ map (\\n -&gt; (eField (xs!!n) + (eCoefficients!!n)*(hField (xs!!n) - hField (xs!!(n-1))),  hField (xs!!n) ) ) [1..(numCells-1)]\r\n\r\nupdate :: [(Double, Double)] -&gt; [(Double, Double)]\r\nupdate input = (updateE.updateLeftBorder.updateRightBorder.updateH) input\r\n\r\neCoefficients = (replicate 250 $ fdtdECoefficient 1.0) ++ (replicate 50 $ fdtdECoefficient 10.0) ++ (replicate 100 $ fdtdECoefficient 1.0)\r\nhCoefficients = replicate numCells $ fdtdHCoefficient 1.0\r\n\r\nsampleGaussian x = 0.5*2**(-((fromIntegral x-80)**2)\/20)\r\n\r\nblankField = [(sampleGaussian x, -sampleGaussian x) | x &lt;- [1..numCells]]\r\neField = fst\r\nhField = snd\r\n\r\ngetIteration n =  last $ take n $ iterate update blankField\r\n\r\nprintIteration n = sequence $ map (\\(x, y) -&gt; putStrLn (show x ++ &quot;,&quot; ++ show y)) (getIteration n)\r\n\r\n-- GRAPHICS CODE\r\n \r\nePoints :: Int -&gt; [(GLfloat,GLfloat,GLfloat)]\r\nePoints n = [ ( fromIntegral k \/ (fromIntegral numCells \/2.0) - 1.0, realToFrac $ fst ((getIteration n)!!k), 0) | k &lt;- [0..numCells-1] ]\r\n\r\nhPoints :: Int -&gt; [(GLfloat,GLfloat,GLfloat)]\r\nhPoints n = [ ( fromIntegral k \/ (fromIntegral numCells \/2.0) - 1.0, realToFrac $ snd ((getIteration n)!!k), 0) | k &lt;- [0..numCells-1] ]\r\n \r\nmain :: IO ()\r\nmain = do\r\n  (_progName, _args) &lt;- getArgsAndInitialize\r\n  _window &lt;- createWindow &quot;FDTD Plot&quot;\r\n  it &lt;- newIORef 1.0\r\n  displayCallback $= display it\r\n  idleCallback $= Just (idle it)\r\n  mainLoop\r\n \r\ndisplay :: IORef Double -&gt; DisplayCallback\r\ndisplay it = do \r\n  itn &lt;- get it\r\n\r\n  let color3f r g b = color $ Color3 r g (b :: GLfloat)\r\n      vertex3f x y z = vertex $ Vertex3 x y (z :: GLfloat)\r\n\r\n  clear [ColorBuffer]\r\n  renderPrimitive LineStrip $ do\r\n     color3f 1.0 0.0 0.0\r\n     mapM_ (\\(x, y, z) -&gt; vertex $ Vertex3 x y z) (ePoints $ round itn)\r\n  renderPrimitive LineStrip $ do\r\n     color3f 0.0 0.0 1.0\r\n     mapM_ (\\(x, y, z) -&gt; vertex $ Vertex3 x y z) (hPoints $ round itn)\r\n  renderPrimitive LineStrip $ do\r\n     color3f 0.0 1.0 0.0\r\n     vertex3f 0.25 1.0 0.0\r\n     vertex3f 0.5 1.0 0.0\r\n     vertex3f 0.5 (-1.0) 0.0\r\n     vertex3f 0.25 (-1.0) 0.0\r\n     vertex3f 0.25 1.0 0.0\r\n  flush\r\n\r\nidle :: IORef Double -&gt; IdleCallback\r\nidle it = do\r\n  it $~! (+0.5)\r\n  postRedisplay Nothing<\/pre>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 07 Nov 2014 08:27:26 +0000","created_by":1,"updated_at":"Fri, 07 Nov 2014 08:27:26 +0000","updated_by":1,"published_at":"","published_by":1},{"id":506,"title":"Basic 1D FDTD simulation in Haskell","slug":"basic-1d-fdtd-simulation-in-haskell","markdown":"\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"\/\/www.youtube.com\/embed\/z8i3M9kg9Rw\" width=\"560\"><\/iframe>\n\nGet the source [here](https:\/\/www.dropbox.com\/s\/e0hi2er9oijkw0d\/fdtd.hs?dl=0). Make sure to compile with \u2018ghc fdtd -O2\u2032 otherwise it\u2019ll be insanely slow (Will be profiling for space leaks, probably switching to discrete array constructs in the future).\n\n\n","html":"<p><iframe src=\"\/\/www.youtube.com\/embed\/z8i3M9kg9Rw\" height=\"315\" width=\"560\" allowfullscreen=\"\" frameborder=\"0\"><\/iframe><\/p>\n<p>Get the source <a href=\"https:\/\/www.dropbox.com\/s\/e0hi2er9oijkw0d\/fdtd.hs?dl=0\">here<\/a>. Make sure to compile with &#8216;ghc fdtd -O2&#8242; otherwise it&#8217;ll be insanely slow (Will be profiling for space leaks, probably switching to discrete array constructs in the future).<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 07 Nov 2014 13:56:54 +0000","created_by":1,"updated_at":"Fri, 07 Nov 2014 13:56:54 +0000","updated_by":1,"published_at":"Fri, 07 Nov 2014 13:56:54 +0000","published_by":1},{"id":509,"title":"(no title)","slug":"temp-slug-24","markdown":"\nhttp:\/\/soft.vub.ac.be\/~cderoove\/structuur2\/C++11.pdf\n\n\n","html":"<p>http:\/\/soft.vub.ac.be\/~cderoove\/structuur2\/C++11.pdf<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 16 Jan 2015 08:42:44 +0000","created_by":1,"updated_at":"Fri, 16 Jan 2015 08:42:44 +0000","updated_by":1,"published_at":"","published_by":1},{"id":572,"title":"RF learning materials","slug":"temp-slug-25","markdown":"\nRF Microelectronics design\n\nhttp:\/\/www.cear.ufpb.br\/~antoniosouza\/RF%20Microelectronics%20-%20Behzad%20Razavi.pdf\n\nBasic RF design:\n\nhttp:\/\/www.amazon.com\/RF-Circuit-Design-Second-Edition\/dp\/0750685182\n\nHigh-speed RF PCB Design:\n\nhttp:\/\/ocw.bib.upct.es\/pluginfile.php\/7994\/mod_resource\/content\/1\/High_speed_Circuit_Board_Signal_Integrity.pdf\n\n\n","html":"<p>RF Microelectronics design<\/p>\n<p>http:\/\/www.cear.ufpb.br\/~antoniosouza\/RF%20Microelectronics%20-%20Behzad%20Razavi.pdf<\/p>\n<p>Basic RF design:<\/p>\n<p>http:\/\/www.amazon.com\/RF-Circuit-Design-Second-Edition\/dp\/0750685182<\/p>\n<p>High-speed RF PCB Design:<\/p>\n<p>http:\/\/ocw.bib.upct.es\/pluginfile.php\/7994\/mod_resource\/content\/1\/High_speed_Circuit_Board_Signal_Integrity.pdf<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 05 Feb 2015 09:53:16 +0000","created_by":1,"updated_at":"Thu, 05 Feb 2015 09:53:16 +0000","updated_by":1,"published_at":"","published_by":1},{"id":573,"title":"Altium library forum link","slug":"temp-slug-26","markdown":"\nhttp:\/\/www.eevblog.com\/forum\/altium\/altium-preinstalled-library\/\n\n\n","html":"<p>http:\/\/www.eevblog.com\/forum\/altium\/altium-preinstalled-library\/<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 05 Feb 2015 10:06:59 +0000","created_by":1,"updated_at":"Thu, 05 Feb 2015 10:06:59 +0000","updated_by":1,"published_at":"","published_by":1}],"tags":[{"id":13,"name":"c++","slug":"c","description":""},{"id":33,"name":"console","slug":"console","description":""},{"id":34,"name":"minesweeper","slug":"minesweeper","description":""},{"id":32,"name":"textsweeper","slug":"textsweeper","description":""}],"posts_tags":[{"tag_id":13,"post_id":63},{"tag_id":33,"post_id":63},{"tag_id":34,"post_id":63},{"tag_id":32,"post_id":63}],"users":[{"id":15,"slug":"Albert5","bio":false,"website":"","created_at":"Sat, 17 Jan 2015 13:15:45 +0000","created_by":1,"email":"wp@hernimos.pl","name":"albert5"},{"id":16,"slug":"AudreaMitchell","bio":false,"website":"","created_at":"Sat, 28 Feb 2015 13:38:19 +0000","created_by":1,"email":"alertinstinct9686@mail.bg","name":"audreamitchell"},{"id":6,"slug":"BaileyKnipe","bio":false,"website":"","created_at":"Sun, 10 Nov 2013 18:45:01 +0000","created_by":1,"email":"stacyvnac@hotmail.com","name":"baileyknipe"},{"id":13,"slug":"DonnyErickson","bio":false,"website":"","created_at":"Wed, 19 Nov 2014 09:53:27 +0000","created_by":1,"email":"sjeatmahm@yahoo.com","name":"donnyerickson"},{"id":19,"slug":"EstherVuu06421","bio":false,"website":"","created_at":"Wed, 01 Apr 2015 10:13:32 +0000","created_by":1,"email":"pkdtxofhpuf@yahoo.com","name":"esthervuu06421"},{"id":14,"slug":"EveHPIsgstjpews","bio":false,"website":"","created_at":"Mon, 12 Jan 2015 22:04:27 +0000","created_by":1,"email":"eveglover26@net.schackmail.com","name":"evehpisgstjpews"},{"id":11,"slug":"GlenWeatherburn","bio":false,"website":"","created_at":"Wed, 08 Oct 2014 19:29:28 +0000","created_by":1,"email":"palmaloreauxutrs@yahoo.com","name":"glenweatherburn"},{"id":9,"slug":"JesusAgnew","bio":false,"website":"","created_at":"Mon, 06 Jan 2014 13:08:50 +0000","created_by":1,"email":"Venitacse052@hotmail.com","name":"jesusagnew"},{"id":12,"slug":"jlhy1101","bio":false,"website":"","created_at":"Wed, 12 Nov 2014 04:42:58 +0000","created_by":1,"email":"jlhy010@hotmail.com","name":"jlhy1101"},{"id":7,"slug":"Kelvin97Xgsw","bio":false,"website":"","created_at":"Tue, 26 Nov 2013 23:30:27 +0000","created_by":1,"email":"Shawneecul206@hotmail.com","name":"kelvin97xgsw"},{"id":21,"slug":"KermitHoran5","bio":false,"website":"","created_at":"Thu, 11 Jun 2015 18:19:40 +0000","created_by":1,"email":"fleminghattenjwm@yahoo.com","name":"kermithoran5"},{"id":20,"slug":"Laura24G8193977","bio":false,"website":"","created_at":"Wed, 01 Apr 2015 23:14:15 +0000","created_by":1,"email":"flashyrationaleja@freemail.hu","name":"laura24g8193977"},{"id":4,"slug":"LeilaHeady","bio":false,"website":"","created_at":"Thu, 24 Oct 2013 08:49:39 +0000","created_by":1,"email":"fariswtp@hotmail.com","name":"leilaheady"},{"id":8,"slug":"MichelineXxg","bio":false,"website":"","created_at":"Thu, 12 Dec 2013 22:50:08 +0000","created_by":1,"email":"raulolowe2000@hotmail.com","name":"michelinexxg"},{"id":18,"slug":"RosarioKSP","bio":false,"website":"","created_at":"Thu, 26 Mar 2015 09:29:57 +0000","created_by":1,"email":"rambunctiouston37@mail.bg","name":"rosarioksp"},{"id":10,"slug":"RosauraTrivett","bio":false,"website":"","created_at":"Sat, 06 Sep 2014 21:11:55 +0000","created_by":1,"email":"elfinebb13h00@outlook.com","name":"rosauratrivett"},{"id":1,"slug":"schnommus","bio":false,"website":"","created_at":"Mon, 23 Jan 2012 01:43:14 +0000","created_by":1,"email":"sebastianh@bigpond.com","name":"schnommus"},{"id":22,"slug":"ShielaElder9072","bio":false,"website":"","created_at":"Sun, 12 Jul 2015 22:41:41 +0000","created_by":1,"email":"genniegehlerkc9658@yahoo.com","name":"shielaelder9072"},{"id":17,"slug":"SylviaWicks","bio":false,"website":"","created_at":"Sat, 07 Mar 2015 14:08:02 +0000","created_by":1,"email":"redundantsuppli55@mail.bg","name":"sylviawicks"},{"id":3,"slug":"thetechant","bio":false,"website":"","created_at":"Fri, 01 Jun 2012 02:52:03 +0000","created_by":1,"email":"thetechant@gmail.com","name":"thetechant"},{"id":5,"slug":"WillianReeks","bio":false,"website":"","created_at":"Thu, 24 Oct 2013 18:53:40 +0000","created_by":1,"email":"awarequalm384lf44@outlook.com","name":"willianreeks"},{"id":2,"slug":"WONKUS_DEEE","bio":false,"website":"","created_at":"Mon, 23 Jan 2012 05:34:37 +0000","created_by":1,"email":"green_blob_industries@hotmail.com","name":"wonkus_deee"}]},"meta":{"exported_on":"Tue, 21 Jul 2015 11:20:08 +0000","version":"000"}}